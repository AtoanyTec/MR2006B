

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Oct 17 16:48:31 2024

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _TRISB	set	3987
    56  0000                     _TRISB4	set	31900
    57  0000                     _TRISB5	set	31901
    58  0000                     _RB4	set	31756
    59  0000                     _RB5	set	31757
    60  0000                     _RB3	set	31755
    61  0000                     _RB2	set	31754
    62  0000                     _RB1	set	31753
    63  0000                     _RB0	set	31752
    64                           
    65                           	psect	smallconst
    66  000800                     __psmallconst:
    67                           	callstack 0
    68  000800  00                 	db	0
    69  000801                     STR_1:
    70  000801  54                 	db	84	;'T'
    71  000802  65                 	db	101	;'e'
    72  000803  63                 	db	99	;'c'
    73  000804  6E                 	db	110	;'n'
    74  000805  6F                 	db	111	;'o'
    75  000806  6C                 	db	108	;'l'
    76  000807  6F                 	db	111	;'o'
    77  000808  67                 	db	103	;'g'
    78  000809  69                 	db	105	;'i'
    79  00080A  63                 	db	99	;'c'
    80  00080B  6F                 	db	111	;'o'
    81  00080C  00                 	db	0
    82  00080D                     STR_2:
    83  00080D  56                 	db	86	;'V'
    84  00080E  6F                 	db	111	;'o'
    85  00080F  6C                 	db	108	;'l'
    86  000810  74                 	db	116	;'t'
    87  000811  61                 	db	97	;'a'
    88  000812  6A                 	db	106	;'j'
    89  000813  65                 	db	101	;'e'
    90  000814  3A                 	db	58	;':'
    91  000815  20                 	db	32
    92  000816  00                 	db	0
    93  000817                     STR_3:
    94  000817  56                 	db	86	;'V'
    95  000818  6F                 	db	111	;'o'
    96  000819  6C                 	db	108	;'l'
    97  00081A  74                 	db	116	;'t'
    98  00081B  73                 	db	115	;'s'
    99  00081C  00                 	db	0
   100  00081D  00                 	db	0	; dummy byte at the end
   101  0000                     
   102                           ; #config settings
   103                           
   104                           	psect	cinit
   105  000A9E                     __pcinit:
   106                           	callstack 0
   107  000A9E                     start_initialization:
   108                           	callstack 0
   109  000A9E                     __initialization:
   110                           	callstack 0
   111  000A9E                     end_of_initialization:
   112                           	callstack 0
   113  000A9E                     __end_of__initialization:
   114                           	callstack 0
   115  000A9E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   116  000AA0  6EF8               	movwf	tblptru,c
   117  000AA2  0E08               	movlw	high __Lsmallconst
   118  000AA4  6EF7               	movwf	tblptrh,c
   119  000AA6  0100               	movlb	0
   120  000AA8  EF0F  F004         	goto	_main	;jump to C main() function
   121                           
   122                           	psect	cstackCOMRAM
   123  000001                     __pcstackCOMRAM:
   124                           	callstack 0
   125  000001                     LCD_DATA@Data:
   126                           	callstack 0
   127                           
   128                           ; 1 bytes @ 0x0
   129  000001                     	ds	1
   130  000002                     LCD_CMD@CMD:
   131                           	callstack 0
   132  000002                     LCD_Write_Char@Low4:
   133                           	callstack 0
   134                           
   135                           ; 1 bytes @ 0x1
   136  000002                     	ds	1
   137  000003                     ??_LCD_Init:
   138  000003                     LCD_Set_Cursor@c:
   139                           	callstack 0
   140  000003                     LCD_Write_Char@High4:
   141                           	callstack 0
   142                           
   143                           ; 1 bytes @ 0x2
   144  000003                     	ds	1
   145  000004                     LCD_Set_Cursor@r:
   146                           	callstack 0
   147  000004                     LCD_Write_Char@Data:
   148                           	callstack 0
   149                           
   150                           ; 1 bytes @ 0x3
   151  000004                     	ds	1
   152  000005                     LCD_Set_Cursor@Low4:
   153                           	callstack 0
   154  000005                     LCD_Write_String@str:
   155                           	callstack 0
   156                           
   157                           ; 2 bytes @ 0x4
   158  000005                     	ds	1
   159  000006                     LCD_Set_Cursor@High4:
   160                           	callstack 0
   161                           
   162                           ; 1 bytes @ 0x5
   163  000006                     	ds	1
   164  000007                     ??_LCD_Write_String:
   165  000007                     LCD_Set_Cursor@Temp:
   166                           	callstack 0
   167                           
   168                           ; 1 bytes @ 0x6
   169  000007                     	ds	2
   170  000009                     LCD_Write_String@i:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x8
   174  000009                     	ds	2
   175  00000B                     ??_main:
   176                           
   177                           ; 1 bytes @ 0xA
   178  00000B                     	ds	2
   179                           
   180 ;;
   181 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   182 ;;
   183 ;; *************** function _main *****************
   184 ;; Defined at:
   185 ;;		line 23 in file "LCD_example.c"
   186 ;; Parameters:    Size  Location     Type
   187 ;;		None
   188 ;; Auto vars:     Size  Location     Type
   189 ;;  v               2    0        int 
   190 ;; Return value:  Size  Location     Type
   191 ;;                  1    wreg      void 
   192 ;; Registers used:
   193 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   194 ;; Tracked objects:
   195 ;;		On entry : 0/0
   196 ;;		On exit  : 0/0
   197 ;;		Unchanged: 0/0
   198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   199 ;;      Params:         0       0       0       0       0       0       0       0       0
   200 ;;      Locals:         0       0       0       0       0       0       0       0       0
   201 ;;      Temps:          2       0       0       0       0       0       0       0       0
   202 ;;      Totals:         2       0       0       0       0       0       0       0       0
   203 ;;Total ram usage:        2 bytes
   204 ;; Hardware stack levels required when called: 3
   205 ;; This function calls:
   206 ;;		_LCD_Clear
   207 ;;		_LCD_Init
   208 ;;		_LCD_Set_Cursor
   209 ;;		_LCD_Write_Char
   210 ;;		_LCD_Write_String
   211 ;; This function is called by:
   212 ;;		Startup code after reset
   213 ;; This function uses a non-reentrant model
   214 ;;
   215                           
   216                           	psect	text0
   217  00081E                     __ptext0:
   218                           	callstack 0
   219  00081E                     _main:
   220                           	callstack 28
   221  00081E                     
   222                           ;LCD_example.c: 27:     LCD_Init();
   223  00081E  EC58  F004         	call	_LCD_Init	;wreg free
   224  000822                     
   225                           ;LCD_example.c: 28:     LCD_Clear();
   226  000822  EC56  F005         	call	_LCD_Clear	;wreg free
   227  000826                     
   228                           ;LCD_example.c: 29:     LCD_Set_Cursor(1,1);
   229  000826  0E01               	movlw	1
   230  000828  6E03               	movwf	LCD_Set_Cursor@c^0,c
   231  00082A  0E01               	movlw	1
   232  00082C  EC95  F004         	call	_LCD_Set_Cursor
   233  000830                     
   234                           ;LCD_example.c: 30:     LCD_Write_String("Tecnologico");
   235  000830  0E01               	movlw	low STR_1
   236  000832  6E05               	movwf	LCD_Write_String@str^0,c
   237  000834  0E08               	movlw	high STR_1
   238  000836  6E06               	movwf	(LCD_Write_String@str+1)^0,c
   239  000838  ECF4  F004         	call	_LCD_Write_String	;wreg free
   240  00083C                     
   241                           ;LCD_example.c: 31:     _delay((unsigned long)((300)*(4000000/4000.0)));
   242  00083C  0E02               	movlw	2
   243  00083E  6E0C               	movwf	(??_main+1)^0,c
   244  000840  0E86               	movlw	134
   245  000842  6E0B               	movwf	??_main^0,c
   246  000844  0E99               	movlw	153
   247  000846                     u117:
   248  000846  2EE8               	decfsz	wreg,f,c
   249  000848  D7FE               	bra	u117
   250  00084A  2E0B               	decfsz	??_main^0,f,c
   251  00084C  D7FC               	bra	u117
   252  00084E  2E0C               	decfsz	(??_main+1)^0,f,c
   253  000850  D7FA               	bra	u117
   254  000852  F000               	nop	
   255  000854                     
   256                           ;LCD_example.c: 32:     LCD_Set_Cursor(2,1);
   257  000854  0E01               	movlw	1
   258  000856  6E03               	movwf	LCD_Set_Cursor@c^0,c
   259  000858  0E02               	movlw	2
   260  00085A  EC95  F004         	call	_LCD_Set_Cursor
   261  00085E                     
   262                           ;LCD_example.c: 34:     LCD_Write_String("Voltaje: ");
   263  00085E  0E0D               	movlw	low STR_2
   264  000860  6E05               	movwf	LCD_Write_String@str^0,c
   265  000862  0E08               	movlw	high STR_2
   266  000864  6E06               	movwf	(LCD_Write_String@str+1)^0,c
   267  000866  ECF4  F004         	call	_LCD_Write_String	;wreg free
   268  00086A                     
   269                           ;LCD_example.c: 35:     LCD_Set_Cursor(2,9);
   270  00086A  0E09               	movlw	9
   271  00086C  6E03               	movwf	LCD_Set_Cursor@c^0,c
   272  00086E  0E02               	movlw	2
   273  000870  EC95  F004         	call	_LCD_Set_Cursor
   274  000874                     
   275                           ;LCD_example.c: 36:     LCD_Write_Char(v+48);
   276  000874  0E33               	movlw	51
   277  000876  EC1F  F005         	call	_LCD_Write_Char
   278  00087A                     
   279                           ;LCD_example.c: 37:     LCD_Set_Cursor(2,11);
   280  00087A  0E0B               	movlw	11
   281  00087C  6E03               	movwf	LCD_Set_Cursor@c^0,c
   282  00087E  0E02               	movlw	2
   283  000880  EC95  F004         	call	_LCD_Set_Cursor
   284  000884                     
   285                           ;LCD_example.c: 38:     LCD_Write_String("Volts");
   286  000884  0E17               	movlw	low STR_3
   287  000886  6E05               	movwf	LCD_Write_String@str^0,c
   288  000888  0E08               	movlw	high STR_3
   289  00088A  6E06               	movwf	(LCD_Write_String@str+1)^0,c
   290  00088C  ECF4  F004         	call	_LCD_Write_String	;wreg free
   291  000890                     
   292                           ;LCD_example.c: 39:     _delay((unsigned long)((300)*(4000000/4000.0)));
   293  000890  0E02               	movlw	2
   294  000892  6E0C               	movwf	(??_main+1)^0,c
   295  000894  0E86               	movlw	134
   296  000896  6E0B               	movwf	??_main^0,c
   297  000898  0E99               	movlw	153
   298  00089A                     u127:
   299  00089A  2EE8               	decfsz	wreg,f,c
   300  00089C  D7FE               	bra	u127
   301  00089E  2E0B               	decfsz	??_main^0,f,c
   302  0008A0  D7FC               	bra	u127
   303  0008A2  2E0C               	decfsz	(??_main+1)^0,f,c
   304  0008A4  D7FA               	bra	u127
   305  0008A6  F000               	nop	
   306  0008A8                     l17:
   307  0008A8  EF54  F004         	goto	l17
   308  0008AC  EF00  F000         	goto	start
   309  0008B0                     __end_of_main:
   310                           	callstack 0
   311                           
   312 ;; *************** function _LCD_Write_String *****************
   313 ;; Defined at:
   314 ;;		line 122 in file "LCD.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;  str             2    4[COMRAM] PTR unsigned char 
   317 ;;		 -> STR_3(6), STR_2(10), STR_1(12), 
   318 ;; Auto vars:     Size  Location     Type
   319 ;;  i               2    8[COMRAM] int 
   320 ;; Return value:  Size  Location     Type
   321 ;;                  1    wreg      void 
   322 ;; Registers used:
   323 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   324 ;; Tracked objects:
   325 ;;		On entry : 0/0
   326 ;;		On exit  : 0/0
   327 ;;		Unchanged: 0/0
   328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   329 ;;      Params:         2       0       0       0       0       0       0       0       0
   330 ;;      Locals:         2       0       0       0       0       0       0       0       0
   331 ;;      Temps:          2       0       0       0       0       0       0       0       0
   332 ;;      Totals:         6       0       0       0       0       0       0       0       0
   333 ;;Total ram usage:        6 bytes
   334 ;; Hardware stack levels used: 1
   335 ;; Hardware stack levels required when called: 2
   336 ;; This function calls:
   337 ;;		_LCD_Write_Char
   338 ;; This function is called by:
   339 ;;		_main
   340 ;; This function uses a non-reentrant model
   341 ;;
   342                           
   343                           	psect	text1
   344  0009E8                     __ptext1:
   345                           	callstack 0
   346  0009E8                     _LCD_Write_String:
   347                           	callstack 28
   348  0009E8                     
   349                           ;LCD.c: 122: void LCD_Write_String(char *str);LCD.c: 123: {;LCD.c: 124:     int i;;LCD.c
      +                          : 125:     for(i=0;str[i]!='\0';i++)
   350  0009E8  0E00               	movlw	0
   351  0009EA  6E0A               	movwf	(LCD_Write_String@i+1)^0,c
   352  0009EC  0E00               	movlw	0
   353  0009EE  6E09               	movwf	LCD_Write_String@i^0,c
   354  0009F0  EF0A  F005         	goto	l898
   355  0009F4                     l894:
   356                           
   357                           ;LCD.c: 126:        LCD_Write_Char(str[i]);
   358  0009F4  5009               	movf	LCD_Write_String@i^0,w,c
   359  0009F6  2405               	addwf	LCD_Write_String@str^0,w,c
   360  0009F8  6E07               	movwf	??_LCD_Write_String^0,c
   361  0009FA  500A               	movf	(LCD_Write_String@i+1)^0,w,c
   362  0009FC  2006               	addwfc	(LCD_Write_String@str+1)^0,w,c
   363  0009FE  6E08               	movwf	(??_LCD_Write_String+1)^0,c
   364  000A00  C007  FFF6         	movff	??_LCD_Write_String,tblptrl
   365  000A04  C008  FFF7         	movff	??_LCD_Write_String+1,tblptrh
   366  000A08                     	if	0	;tblptru may be non-zero
   367  000A08                     	endif
   368  000A08                     	if	0	;tblptru may be non-zero
   369  000A08                     	endif
   370  000A08  0008               	tblrd		*
   371  000A0A  50F5               	movf	tablat,w,c
   372  000A0C  EC1F  F005         	call	_LCD_Write_Char
   373  000A10  4A09               	infsnz	LCD_Write_String@i^0,f,c
   374  000A12  2A0A               	incf	(LCD_Write_String@i+1)^0,f,c
   375  000A14                     l898:
   376  000A14  5009               	movf	LCD_Write_String@i^0,w,c
   377  000A16  2405               	addwf	LCD_Write_String@str^0,w,c
   378  000A18  6E07               	movwf	??_LCD_Write_String^0,c
   379  000A1A  500A               	movf	(LCD_Write_String@i+1)^0,w,c
   380  000A1C  2006               	addwfc	(LCD_Write_String@str+1)^0,w,c
   381  000A1E  6E08               	movwf	(??_LCD_Write_String+1)^0,c
   382  000A20  C007  FFF6         	movff	??_LCD_Write_String,tblptrl
   383  000A24  C008  FFF7         	movff	??_LCD_Write_String+1,tblptrh
   384  000A28                     	if	0	;tblptru may be non-zero
   385  000A28                     	endif
   386  000A28                     	if	0	;tblptru may be non-zero
   387  000A28                     	endif
   388  000A28  0008               	tblrd		*
   389  000A2A  50F5               	movf	tablat,w,c
   390  000A2C  0900               	iorlw	0
   391  000A2E  A4D8               	btfss	status,2,c
   392  000A30  EF1C  F005         	goto	u101
   393  000A34  EF1E  F005         	goto	u100
   394  000A38                     u101:
   395  000A38  EFFA  F004         	goto	l894
   396  000A3C                     u100:
   397  000A3C  0012               	return		;funcret
   398  000A3E                     __end_of_LCD_Write_String:
   399                           	callstack 0
   400                           
   401 ;; *************** function _LCD_Write_Char *****************
   402 ;; Defined at:
   403 ;;		line 105 in file "LCD.c"
   404 ;; Parameters:    Size  Location     Type
   405 ;;  Data            1    wreg     unsigned char 
   406 ;; Auto vars:     Size  Location     Type
   407 ;;  Data            1    3[COMRAM] unsigned char 
   408 ;;  High4           1    2[COMRAM] unsigned char 
   409 ;;  Low4            1    1[COMRAM] unsigned char 
   410 ;; Return value:  Size  Location     Type
   411 ;;                  1    wreg      void 
   412 ;; Registers used:
   413 ;;		wreg, status,2, status,0, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   419 ;;      Params:         0       0       0       0       0       0       0       0       0
   420 ;;      Locals:         3       0       0       0       0       0       0       0       0
   421 ;;      Temps:          0       0       0       0       0       0       0       0       0
   422 ;;      Totals:         3       0       0       0       0       0       0       0       0
   423 ;;Total ram usage:        3 bytes
   424 ;; Hardware stack levels used: 1
   425 ;; Hardware stack levels required when called: 1
   426 ;; This function calls:
   427 ;;		_LCD_DATA
   428 ;; This function is called by:
   429 ;;		_main
   430 ;;		_LCD_Write_String
   431 ;; This function uses a non-reentrant model
   432 ;;
   433                           
   434                           	psect	text2
   435  000A3E                     __ptext2:
   436                           	callstack 0
   437  000A3E                     _LCD_Write_Char:
   438                           	callstack 28
   439                           
   440                           ;incstack = 0
   441                           ;LCD_Write_Char@Data stored from wreg
   442  000A3E  6E04               	movwf	LCD_Write_Char@Data^0,c
   443  000A40                     
   444                           ;LCD.c: 105: void LCD_Write_Char(char Data);LCD.c: 106: {;LCD.c: 107:    char Low4,High4
      +                          ;;LCD.c: 108:    Low4 = Data & 0x0F;
   445  000A40  5004               	movf	LCD_Write_Char@Data^0,w,c
   446  000A42  0B0F               	andlw	15
   447  000A44  6E02               	movwf	LCD_Write_Char@Low4^0,c
   448                           
   449                           ;LCD.c: 109:    High4 = Data & 0xF0;
   450  000A46  5004               	movf	LCD_Write_Char@Data^0,w,c
   451  000A48  0BF0               	andlw	240
   452  000A4A  6E03               	movwf	LCD_Write_Char@High4^0,c
   453  000A4C                     
   454                           ;LCD.c: 110:    RB5 = 1;
   455  000A4C  8A81               	bsf	3969,5,c	;volatile
   456  000A4E                     
   457                           ;LCD.c: 111:    LCD_DATA(High4>>4);
   458  000A4E  3803               	swapf	LCD_Write_Char@High4^0,w,c
   459  000A50  0B0F               	andlw	15
   460  000A52  ECC6  F004         	call	_LCD_DATA
   461  000A56                     
   462                           ;LCD.c: 112:    RB4 = 1;
   463  000A56  8881               	bsf	3969,4,c	;volatile
   464  000A58                     
   465                           ;LCD.c: 113:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   466  000A58  0EA6               	movlw	166
   467  000A5A                     u137:
   468  000A5A  2EE8               	decfsz	wreg,f,c
   469  000A5C  D7FE               	bra	u137
   470  000A5E  D000               	nop2	
   471  000A60                     
   472                           ;LCD.c: 114:    RB4 = 0;
   473  000A60  9881               	bcf	3969,4,c	;volatile
   474  000A62                     
   475                           ;LCD.c: 115:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   476  000A62  0EA6               	movlw	166
   477  000A64                     u147:
   478  000A64  2EE8               	decfsz	wreg,f,c
   479  000A66  D7FE               	bra	u147
   480  000A68  D000               	nop2	
   481  000A6A                     
   482                           ;LCD.c: 116:    LCD_DATA(Low4);
   483  000A6A  5002               	movf	LCD_Write_Char@Low4^0,w,c
   484  000A6C  ECC6  F004         	call	_LCD_DATA
   485  000A70                     
   486                           ;LCD.c: 117:    RB4 = 1;
   487  000A70  8881               	bsf	3969,4,c	;volatile
   488  000A72                     
   489                           ;LCD.c: 118:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   490  000A72  0EA6               	movlw	166
   491  000A74                     u157:
   492  000A74  2EE8               	decfsz	wreg,f,c
   493  000A76  D7FE               	bra	u157
   494  000A78  D000               	nop2	
   495  000A7A                     
   496                           ;LCD.c: 119:    RB4 = 0;
   497  000A7A  9881               	bcf	3969,4,c	;volatile
   498  000A7C                     
   499                           ;LCD.c: 120:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   500  000A7C  0EA6               	movlw	166
   501  000A7E                     u167:
   502  000A7E  2EE8               	decfsz	wreg,f,c
   503  000A80  D7FE               	bra	u167
   504  000A82  D000               	nop2	
   505  000A84  0012               	return		;funcret
   506  000A86                     __end_of_LCD_Write_Char:
   507                           	callstack 0
   508                           
   509 ;; *************** function _LCD_Set_Cursor *****************
   510 ;; Defined at:
   511 ;;		line 63 in file "LCD.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;  r               1    wreg     unsigned char 
   514 ;;  c               1    2[COMRAM] unsigned char 
   515 ;; Auto vars:     Size  Location     Type
   516 ;;  r               1    3[COMRAM] unsigned char 
   517 ;;  Temp            1    6[COMRAM] unsigned char 
   518 ;;  High4           1    5[COMRAM] unsigned char 
   519 ;;  Low4            1    4[COMRAM] unsigned char 
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, status,2, status,0, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   529 ;;      Params:         1       0       0       0       0       0       0       0       0
   530 ;;      Locals:         4       0       0       0       0       0       0       0       0
   531 ;;      Temps:          0       0       0       0       0       0       0       0       0
   532 ;;      Totals:         5       0       0       0       0       0       0       0       0
   533 ;;Total ram usage:        5 bytes
   534 ;; Hardware stack levels used: 1
   535 ;; Hardware stack levels required when called: 2
   536 ;; This function calls:
   537 ;;		_LCD_CMD
   538 ;; This function is called by:
   539 ;;		_main
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543                           	psect	text3
   544  00092A                     __ptext3:
   545                           	callstack 0
   546  00092A                     _LCD_Set_Cursor:
   547                           	callstack 28
   548                           
   549                           ;incstack = 0
   550                           ;LCD_Set_Cursor@r stored from wreg
   551  00092A  6E04               	movwf	LCD_Set_Cursor@r^0,c
   552  00092C                     
   553                           ;LCD.c: 63: void LCD_Set_Cursor(unsigned char r, unsigned char c);LCD.c: 64: {;LCD.c: 65
      +                          :     unsigned char Temp,Low4,High4;;LCD.c: 66:     if(r == 1)
   554  00092C  0404               	decf	LCD_Set_Cursor@r^0,w,c
   555  00092E  A4D8               	btfss	status,2,c
   556  000930  EF9C  F004         	goto	u81
   557  000934  EF9E  F004         	goto	u80
   558  000938                     u81:
   559  000938  EFAD  F004         	goto	l60
   560  00093C                     u80:
   561  00093C                     
   562                           ;LCD.c: 67:     {;LCD.c: 68:       Temp = 0x80 + c - 1;
   563  00093C  5003               	movf	LCD_Set_Cursor@c^0,w,c
   564  00093E  0F7F               	addlw	127
   565  000940  6E07               	movwf	LCD_Set_Cursor@Temp^0,c
   566                           
   567                           ;LCD.c: 69:       High4 = Temp >> 4;
   568  000942  3807               	swapf	LCD_Set_Cursor@Temp^0,w,c
   569  000944  0B0F               	andlw	15
   570  000946  6E06               	movwf	LCD_Set_Cursor@High4^0,c
   571                           
   572                           ;LCD.c: 70:       Low4 = Temp & 0x0F;
   573  000948  5007               	movf	LCD_Set_Cursor@Temp^0,w,c
   574  00094A  0B0F               	andlw	15
   575  00094C  6E05               	movwf	LCD_Set_Cursor@Low4^0,c
   576  00094E                     
   577                           ;LCD.c: 71:       LCD_CMD(High4);
   578  00094E  5006               	movf	LCD_Set_Cursor@High4^0,w,c
   579  000950  EC43  F005         	call	_LCD_CMD
   580  000954                     
   581                           ;LCD.c: 72:       LCD_CMD(Low4);
   582  000954  5005               	movf	LCD_Set_Cursor@Low4^0,w,c
   583  000956  EC43  F005         	call	_LCD_CMD
   584  00095A                     l60:
   585                           
   586                           ;LCD.c: 74:     if(r == 2)
   587  00095A  0E02               	movlw	2
   588  00095C  1804               	xorwf	LCD_Set_Cursor@r^0,w,c
   589  00095E  A4D8               	btfss	status,2,c
   590  000960  EFB4  F004         	goto	u91
   591  000964  EFB6  F004         	goto	u90
   592  000968                     u91:
   593  000968  EFC5  F004         	goto	l62
   594  00096C                     u90:
   595  00096C                     
   596                           ;LCD.c: 75:     {;LCD.c: 76:       Temp = 0xC0 + c - 1;
   597  00096C  5003               	movf	LCD_Set_Cursor@c^0,w,c
   598  00096E  0FBF               	addlw	191
   599  000970  6E07               	movwf	LCD_Set_Cursor@Temp^0,c
   600                           
   601                           ;LCD.c: 77:       High4 = Temp >> 4;
   602  000972  3807               	swapf	LCD_Set_Cursor@Temp^0,w,c
   603  000974  0B0F               	andlw	15
   604  000976  6E06               	movwf	LCD_Set_Cursor@High4^0,c
   605                           
   606                           ;LCD.c: 78:       Low4 = Temp & 0x0F;
   607  000978  5007               	movf	LCD_Set_Cursor@Temp^0,w,c
   608  00097A  0B0F               	andlw	15
   609  00097C  6E05               	movwf	LCD_Set_Cursor@Low4^0,c
   610  00097E                     
   611                           ;LCD.c: 79:       LCD_CMD(High4);
   612  00097E  5006               	movf	LCD_Set_Cursor@High4^0,w,c
   613  000980  EC43  F005         	call	_LCD_CMD
   614  000984                     
   615                           ;LCD.c: 80:       LCD_CMD(Low4);
   616  000984  5005               	movf	LCD_Set_Cursor@Low4^0,w,c
   617  000986  EC43  F005         	call	_LCD_CMD
   618  00098A                     l62:
   619  00098A  0012               	return		;funcret
   620  00098C                     __end_of_LCD_Set_Cursor:
   621                           	callstack 0
   622                           
   623 ;; *************** function _LCD_Init *****************
   624 ;; Defined at:
   625 ;;		line 83 in file "LCD.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;		None
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      void 
   632 ;; Registers used:
   633 ;;		wreg, status,2, cstack
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   639 ;;      Params:         0       0       0       0       0       0       0       0       0
   640 ;;      Locals:         0       0       0       0       0       0       0       0       0
   641 ;;      Temps:          1       0       0       0       0       0       0       0       0
   642 ;;      Totals:         1       0       0       0       0       0       0       0       0
   643 ;;Total ram usage:        1 bytes
   644 ;; Hardware stack levels used: 1
   645 ;; Hardware stack levels required when called: 2
   646 ;; This function calls:
   647 ;;		_LCD_CMD
   648 ;;		_LCD_DATA
   649 ;; This function is called by:
   650 ;;		_main
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           	psect	text4
   655  0008B0                     __ptext4:
   656                           	callstack 0
   657  0008B0                     _LCD_Init:
   658                           	callstack 28
   659  0008B0                     
   660                           ;LCD.c: 85:   TRISB = 0x00;
   661  0008B0  0E00               	movlw	0
   662  0008B2  6E93               	movwf	147,c	;volatile
   663  0008B4                     
   664                           ;LCD.c: 86:   TRISB5 = 0;
   665  0008B4  9A93               	bcf	3987,5,c	;volatile
   666  0008B6                     
   667                           ;LCD.c: 87:   TRISB4 = 0;
   668  0008B6  9893               	bcf	3987,4,c	;volatile
   669  0008B8                     
   670                           ;LCD.c: 89:   LCD_DATA(0x00);
   671  0008B8  0E00               	movlw	0
   672  0008BA  ECC6  F004         	call	_LCD_DATA
   673  0008BE                     
   674                           ;LCD.c: 90:   _delay((unsigned long)((30)*(4000000/4000.0)));
   675  0008BE  0E27               	movlw	39
   676  0008C0  6E03               	movwf	??_LCD_Init^0,c
   677  0008C2  0EF5               	movlw	245
   678  0008C4                     u177:
   679  0008C4  2EE8               	decfsz	wreg,f,c
   680  0008C6  D7FE               	bra	u177
   681  0008C8  2E03               	decfsz	??_LCD_Init^0,f,c
   682  0008CA  D7FC               	bra	u177
   683  0008CC  F000               	nop	
   684  0008CE                     
   685                           ;LCD.c: 91:   _delay((unsigned long)((500)*(4000000/4000000.0)));
   686  0008CE  0EA6               	movlw	166
   687  0008D0                     u187:
   688  0008D0  2EE8               	decfsz	wreg,f,c
   689  0008D2  D7FE               	bra	u187
   690  0008D4  D000               	nop2	
   691  0008D6                     
   692                           ;LCD.c: 92:   LCD_CMD(0x03);
   693  0008D6  0E03               	movlw	3
   694  0008D8  EC43  F005         	call	_LCD_CMD
   695                           
   696                           ;LCD.c: 93:   _delay((unsigned long)((5)*(4000000/4000.0)));
   697  0008DC  0E07               	movlw	7
   698  0008DE  6E03               	movwf	??_LCD_Init^0,c
   699  0008E0  0E7D               	movlw	125
   700  0008E2                     u197:
   701  0008E2  2EE8               	decfsz	wreg,f,c
   702  0008E4  D7FE               	bra	u197
   703  0008E6  2E03               	decfsz	??_LCD_Init^0,f,c
   704  0008E8  D7FC               	bra	u197
   705  0008EA  F000               	nop	
   706  0008EC                     
   707                           ;LCD.c: 94:   LCD_CMD(0x03);
   708  0008EC  0E03               	movlw	3
   709  0008EE  EC43  F005         	call	_LCD_CMD
   710  0008F2                     
   711                           ;LCD.c: 95:   _delay((unsigned long)((150)*(4000000/4000000.0)));
   712  0008F2  0E32               	movlw	50
   713  0008F4                     u207:
   714  0008F4  2EE8               	decfsz	wreg,f,c
   715  0008F6  D7FE               	bra	u207
   716                           
   717                           ;LCD.c: 96:   LCD_CMD(0x03);
   718  0008F8  0E03               	movlw	3
   719  0008FA  EC43  F005         	call	_LCD_CMD
   720                           
   721                           ;LCD.c: 97:   LCD_CMD(0x02);
   722  0008FE  0E02               	movlw	2
   723  000900  EC43  F005         	call	_LCD_CMD
   724                           
   725                           ;LCD.c: 98:   LCD_CMD(0x02);
   726  000904  0E02               	movlw	2
   727  000906  EC43  F005         	call	_LCD_CMD
   728                           
   729                           ;LCD.c: 99:   LCD_CMD(0x08);
   730  00090A  0E08               	movlw	8
   731  00090C  EC43  F005         	call	_LCD_CMD
   732                           
   733                           ;LCD.c: 100:   LCD_CMD(0x00);
   734  000910  0E00               	movlw	0
   735  000912  EC43  F005         	call	_LCD_CMD
   736                           
   737                           ;LCD.c: 101:   LCD_CMD(0x0C);
   738  000916  0E0C               	movlw	12
   739  000918  EC43  F005         	call	_LCD_CMD
   740                           
   741                           ;LCD.c: 102:   LCD_CMD(0x00);
   742  00091C  0E00               	movlw	0
   743  00091E  EC43  F005         	call	_LCD_CMD
   744                           
   745                           ;LCD.c: 103:   LCD_CMD(0x06);
   746  000922  0E06               	movlw	6
   747  000924  EC43  F005         	call	_LCD_CMD
   748  000928  0012               	return		;funcret
   749  00092A                     __end_of_LCD_Init:
   750                           	callstack 0
   751                           
   752 ;; *************** function _LCD_Clear *****************
   753 ;; Defined at:
   754 ;;		line 58 in file "LCD.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;		None
   757 ;; Auto vars:     Size  Location     Type
   758 ;;		None
   759 ;; Return value:  Size  Location     Type
   760 ;;                  1    wreg      void 
   761 ;; Registers used:
   762 ;;		wreg, status,2, cstack
   763 ;; Tracked objects:
   764 ;;		On entry : 0/0
   765 ;;		On exit  : 0/0
   766 ;;		Unchanged: 0/0
   767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   768 ;;      Params:         0       0       0       0       0       0       0       0       0
   769 ;;      Locals:         0       0       0       0       0       0       0       0       0
   770 ;;      Temps:          0       0       0       0       0       0       0       0       0
   771 ;;      Totals:         0       0       0       0       0       0       0       0       0
   772 ;;Total ram usage:        0 bytes
   773 ;; Hardware stack levels used: 1
   774 ;; Hardware stack levels required when called: 2
   775 ;; This function calls:
   776 ;;		_LCD_CMD
   777 ;; This function is called by:
   778 ;;		_main
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text5
   783  000AAC                     __ptext5:
   784                           	callstack 0
   785  000AAC                     _LCD_Clear:
   786                           	callstack 28
   787  000AAC                     
   788                           ;LCD.c: 60:     LCD_CMD(0);
   789  000AAC  0E00               	movlw	0
   790  000AAE  EC43  F005         	call	_LCD_CMD
   791                           
   792                           ;LCD.c: 61:     LCD_CMD(1);
   793  000AB2  0E01               	movlw	1
   794  000AB4  EC43  F005         	call	_LCD_CMD
   795  000AB8  0012               	return		;funcret
   796  000ABA                     __end_of_LCD_Clear:
   797                           	callstack 0
   798                           
   799 ;; *************** function _LCD_CMD *****************
   800 ;; Defined at:
   801 ;;		line 49 in file "LCD.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;  CMD             1    wreg     unsigned char 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  CMD             1    1[COMRAM] unsigned char 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, status,2, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   815 ;;      Params:         0       0       0       0       0       0       0       0       0
   816 ;;      Locals:         1       0       0       0       0       0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0       0       0
   818 ;;      Totals:         1       0       0       0       0       0       0       0       0
   819 ;;Total ram usage:        1 bytes
   820 ;; Hardware stack levels used: 1
   821 ;; Hardware stack levels required when called: 1
   822 ;; This function calls:
   823 ;;		_LCD_DATA
   824 ;; This function is called by:
   825 ;;		_LCD_Clear
   826 ;;		_LCD_Set_Cursor
   827 ;;		_LCD_Init
   828 ;;		_LCD_SL
   829 ;;		_LCD_SR
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text6
   834  000A86                     __ptext6:
   835                           	callstack 0
   836  000A86                     _LCD_CMD:
   837                           	callstack 28
   838                           
   839                           ;incstack = 0
   840                           ;LCD_CMD@CMD stored from wreg
   841  000A86  6E02               	movwf	LCD_CMD@CMD^0,c
   842  000A88                     
   843                           ;LCD.c: 49: void LCD_CMD(unsigned char CMD);LCD.c: 50: {;LCD.c: 52:     RB5 = 0;
   844  000A88  9A81               	bcf	3969,5,c	;volatile
   845  000A8A                     
   846                           ;LCD.c: 53:     LCD_DATA(CMD);
   847  000A8A  5002               	movf	LCD_CMD@CMD^0,w,c
   848  000A8C  ECC6  F004         	call	_LCD_DATA
   849  000A90                     
   850                           ;LCD.c: 54:     RB4 = 1;
   851  000A90  8881               	bsf	3969,4,c	;volatile
   852  000A92                     
   853                           ;LCD.c: 55:     _delay((unsigned long)((500)*(4000000/4000000.0)));
   854  000A92  0EA6               	movlw	166
   855  000A94                     u217:
   856  000A94  2EE8               	decfsz	wreg,f,c
   857  000A96  D7FE               	bra	u217
   858  000A98  D000               	nop2	
   859  000A9A                     
   860                           ;LCD.c: 56:     RB4 = 0;
   861  000A9A  9881               	bcf	3969,4,c	;volatile
   862  000A9C  0012               	return		;funcret
   863  000A9E                     __end_of_LCD_CMD:
   864                           	callstack 0
   865                           
   866 ;; *************** function _LCD_DATA *****************
   867 ;; Defined at:
   868 ;;		line 30 in file "LCD.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  Data            1    wreg     unsigned char 
   871 ;; Auto vars:     Size  Location     Type
   872 ;;  Data            1    0[COMRAM] unsigned char 
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		wreg
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   882 ;;      Params:         0       0       0       0       0       0       0       0       0
   883 ;;      Locals:         1       0       0       0       0       0       0       0       0
   884 ;;      Temps:          0       0       0       0       0       0       0       0       0
   885 ;;      Totals:         1       0       0       0       0       0       0       0       0
   886 ;;Total ram usage:        1 bytes
   887 ;; Hardware stack levels used: 1
   888 ;; This function calls:
   889 ;;		Nothing
   890 ;; This function is called by:
   891 ;;		_LCD_CMD
   892 ;;		_LCD_Init
   893 ;;		_LCD_Write_Char
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text7
   898  00098C                     __ptext7:
   899                           	callstack 0
   900  00098C                     _LCD_DATA:
   901                           	callstack 28
   902                           
   903                           ;incstack = 0
   904                           ;LCD_DATA@Data stored from wreg
   905  00098C  6E01               	movwf	LCD_DATA@Data^0,c
   906  00098E                     
   907                           ;LCD.c: 30: void LCD_DATA(unsigned char Data);LCD.c: 31: {;LCD.c: 32:     if(Data & 1)
   908  00098E  A001               	btfss	LCD_DATA@Data^0,0,c
   909  000990  EFCC  F004         	goto	u11
   910  000994  EFCE  F004         	goto	u10
   911  000998                     u11:
   912  000998  EFD1  F004         	goto	l43
   913  00099C                     u10:
   914  00099C                     
   915                           ;LCD.c: 33:         RB0 = 1;
   916  00099C  8081               	bsf	3969,0,c	;volatile
   917  00099E  EFD2  F004         	goto	l760
   918  0009A2                     l43:
   919                           
   920                           ;LCD.c: 35:         RB0 = 0;
   921  0009A2  9081               	bcf	3969,0,c	;volatile
   922  0009A4                     l760:
   923                           
   924                           ;LCD.c: 36:     if(Data & 2)
   925  0009A4  A201               	btfss	LCD_DATA@Data^0,1,c
   926  0009A6  EFD7  F004         	goto	u21
   927  0009AA  EFD9  F004         	goto	u20
   928  0009AE                     u21:
   929  0009AE  EFDC  F004         	goto	l45
   930  0009B2                     u20:
   931  0009B2                     
   932                           ;LCD.c: 37:         RB1 = 1;
   933  0009B2  8281               	bsf	3969,1,c	;volatile
   934  0009B4  EFDD  F004         	goto	l764
   935  0009B8                     l45:
   936                           
   937                           ;LCD.c: 39:         RB1 = 0;
   938  0009B8  9281               	bcf	3969,1,c	;volatile
   939  0009BA                     l764:
   940                           
   941                           ;LCD.c: 40:     if(Data & 4)
   942  0009BA  A401               	btfss	LCD_DATA@Data^0,2,c
   943  0009BC  EFE2  F004         	goto	u31
   944  0009C0  EFE4  F004         	goto	u30
   945  0009C4                     u31:
   946  0009C4  EFE7  F004         	goto	l47
   947  0009C8                     u30:
   948  0009C8                     
   949                           ;LCD.c: 41:         RB2 = 1;
   950  0009C8  8481               	bsf	3969,2,c	;volatile
   951  0009CA  EFE8  F004         	goto	l768
   952  0009CE                     l47:
   953                           
   954                           ;LCD.c: 43:         RB2 = 0;
   955  0009CE  9481               	bcf	3969,2,c	;volatile
   956  0009D0                     l768:
   957                           
   958                           ;LCD.c: 44:     if(Data & 8)
   959  0009D0  A601               	btfss	LCD_DATA@Data^0,3,c
   960  0009D2  EFED  F004         	goto	u41
   961  0009D6  EFEF  F004         	goto	u40
   962  0009DA                     u41:
   963  0009DA  EFF2  F004         	goto	l49
   964  0009DE                     u40:
   965  0009DE                     
   966                           ;LCD.c: 45:         RB3 = 1;
   967  0009DE  8681               	bsf	3969,3,c	;volatile
   968  0009E0  EFF3  F004         	goto	l51
   969  0009E4                     l49:
   970                           
   971                           ;LCD.c: 47:         RB3 = 0;
   972  0009E4  9681               	bcf	3969,3,c	;volatile
   973  0009E6                     l51:
   974  0009E6  0012               	return		;funcret
   975  0009E8                     __end_of_LCD_DATA:
   976                           	callstack 0
   977                           
   978                           	psect	rparam
   979  0000                     
   980                           	psect	idloc
   981                           
   982                           ;Config register IDLOC0 @ 0x200000
   983                           ;	unspecified, using default values
   984  200000                     	org	2097152
   985  200000  FF                 	db	255
   986                           
   987                           ;Config register IDLOC1 @ 0x200001
   988                           ;	unspecified, using default values
   989  200001                     	org	2097153
   990  200001  FF                 	db	255
   991                           
   992                           ;Config register IDLOC2 @ 0x200002
   993                           ;	unspecified, using default values
   994  200002                     	org	2097154
   995  200002  FF                 	db	255
   996                           
   997                           ;Config register IDLOC3 @ 0x200003
   998                           ;	unspecified, using default values
   999  200003                     	org	2097155
  1000  200003  FF                 	db	255
  1001                           
  1002                           ;Config register IDLOC4 @ 0x200004
  1003                           ;	unspecified, using default values
  1004  200004                     	org	2097156
  1005  200004  FF                 	db	255
  1006                           
  1007                           ;Config register IDLOC5 @ 0x200005
  1008                           ;	unspecified, using default values
  1009  200005                     	org	2097157
  1010  200005  FF                 	db	255
  1011                           
  1012                           ;Config register IDLOC6 @ 0x200006
  1013                           ;	unspecified, using default values
  1014  200006                     	org	2097158
  1015  200006  FF                 	db	255
  1016                           
  1017                           ;Config register IDLOC7 @ 0x200007
  1018                           ;	unspecified, using default values
  1019  200007                     	org	2097159
  1020  200007  FF                 	db	255
  1021                           
  1022                           	psect	config
  1023                           
  1024                           ;Config register CONFIG1L @ 0x300000
  1025                           ;	PLL Prescaler Selection bits
  1026                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1027                           ;	System Clock Postscaler Selection bits
  1028                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1029                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1030                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1031  300000                     	org	3145728
  1032  300000  01                 	db	1
  1033                           
  1034                           ;Config register CONFIG1H @ 0x300001
  1035                           ;	Oscillator Selection bits
  1036                           ;	FOSC = HS, HS oscillator (HS)
  1037                           ;	Fail-Safe Clock Monitor Enable bit
  1038                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1039                           ;	Internal/External Oscillator Switchover bit
  1040                           ;	IESO = ON, Oscillator Switchover mode enabled
  1041  300001                     	org	3145729
  1042  300001  8C                 	db	140
  1043                           
  1044                           ;Config register CONFIG2L @ 0x300002
  1045                           ;	Power-up Timer Enable bit
  1046                           ;	PWRT = OFF, PWRT disabled
  1047                           ;	Brown-out Reset Enable bits
  1048                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1049                           ;	Brown-out Reset Voltage bits
  1050                           ;	BORV = 3, Minimum setting 2.05V
  1051                           ;	USB Voltage Regulator Enable bit
  1052                           ;	VREGEN = OFF, USB voltage regulator disabled
  1053  300002                     	org	3145730
  1054  300002  19                 	db	25
  1055                           
  1056                           ;Config register CONFIG2H @ 0x300003
  1057                           ;	Watchdog Timer Enable bit
  1058                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1059                           ;	Watchdog Timer Postscale Select bits
  1060                           ;	WDTPS = 32768, 1:32768
  1061  300003                     	org	3145731
  1062  300003  1E                 	db	30
  1063                           
  1064                           ; Padding undefined space
  1065  300004                     	org	3145732
  1066  300004  FF                 	db	255
  1067                           
  1068                           ;Config register CONFIG3H @ 0x300005
  1069                           ;	CCP2 MUX bit
  1070                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1071                           ;	PORTB A/D Enable bit
  1072                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1073                           ;	Low-Power Timer 1 Oscillator Enable bit
  1074                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1075                           ;	MCLR Pin Enable bit
  1076                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1077  300005                     	org	3145733
  1078  300005  81                 	db	129
  1079                           
  1080                           ;Config register CONFIG4L @ 0x300006
  1081                           ;	Stack Full/Underflow Reset Enable bit
  1082                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1083                           ;	Single-Supply ICSP Enable bit
  1084                           ;	LVP = OFF, Single-Supply ICSP disabled
  1085                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1086                           ;	ICPRT = 0x0, unprogrammed default
  1087                           ;	Extended Instruction Set Enable bit
  1088                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1089                           ;	Background Debugger Enable bit
  1090                           ;	DEBUG = 0x1, unprogrammed default
  1091  300006                     	org	3145734
  1092  300006  81                 	db	129
  1093                           
  1094                           ; Padding undefined space
  1095  300007                     	org	3145735
  1096  300007  FF                 	db	255
  1097                           
  1098                           ;Config register CONFIG5L @ 0x300008
  1099                           ;	Code Protection bit
  1100                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1101                           ;	Code Protection bit
  1102                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1103                           ;	Code Protection bit
  1104                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1105                           ;	Code Protection bit
  1106                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1107  300008                     	org	3145736
  1108  300008  0F                 	db	15
  1109                           
  1110                           ;Config register CONFIG5H @ 0x300009
  1111                           ;	Boot Block Code Protection bit
  1112                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1113                           ;	Data EEPROM Code Protection bit
  1114                           ;	CPD = OFF, Data EEPROM is not code-protected
  1115  300009                     	org	3145737
  1116  300009  C0                 	db	192
  1117                           
  1118                           ;Config register CONFIG6L @ 0x30000A
  1119                           ;	Write Protection bit
  1120                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1121                           ;	Write Protection bit
  1122                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1123                           ;	Write Protection bit
  1124                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1125                           ;	Write Protection bit
  1126                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1127  30000A                     	org	3145738
  1128  30000A  0F                 	db	15
  1129                           
  1130                           ;Config register CONFIG6H @ 0x30000B
  1131                           ;	Configuration Register Write Protection bit
  1132                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1133                           ;	Boot Block Write Protection bit
  1134                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1135                           ;	Data EEPROM Write Protection bit
  1136                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1137  30000B                     	org	3145739
  1138  30000B  E0                 	db	224
  1139                           
  1140                           ;Config register CONFIG7L @ 0x30000C
  1141                           ;	Table Read Protection bit
  1142                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1143                           ;	Table Read Protection bit
  1144                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1145                           ;	Table Read Protection bit
  1146                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1147                           ;	Table Read Protection bit
  1148                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1149  30000C                     	org	3145740
  1150  30000C  0F                 	db	15
  1151                           
  1152                           ;Config register CONFIG7H @ 0x30000D
  1153                           ;	Boot Block Table Read Protection bit
  1154                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1155  30000D                     	org	3145741
  1156  30000D  40                 	db	64
  1157                           tosu	equ	0xFFF
  1158                           tosh	equ	0xFFE
  1159                           tosl	equ	0xFFD
  1160                           stkptr	equ	0xFFC
  1161                           pclatu	equ	0xFFB
  1162                           pclath	equ	0xFFA
  1163                           pcl	equ	0xFF9
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           prodh	equ	0xFF4
  1169                           prodl	equ	0xFF3
  1170                           indf0	equ	0xFEF
  1171                           postinc0	equ	0xFEE
  1172                           postdec0	equ	0xFED
  1173                           preinc0	equ	0xFEC
  1174                           plusw0	equ	0xFEB
  1175                           fsr0h	equ	0xFEA
  1176                           fsr0l	equ	0xFE9
  1177                           wreg	equ	0xFE8
  1178                           indf1	equ	0xFE7
  1179                           postinc1	equ	0xFE6
  1180                           postdec1	equ	0xFE5
  1181                           preinc1	equ	0xFE4
  1182                           plusw1	equ	0xFE3
  1183                           fsr1h	equ	0xFE2
  1184                           fsr1l	equ	0xFE1
  1185                           bsr	equ	0xFE0
  1186                           indf2	equ	0xFDF
  1187                           postinc2	equ	0xFDE
  1188                           postdec2	equ	0xFDD
  1189                           preinc2	equ	0xFDC
  1190                           plusw2	equ	0xFDB
  1191                           fsr2h	equ	0xFDA
  1192                           fsr2l	equ	0xFD9
  1193                           status	equ	0xFD8

Data Sizes:
    Strings     28
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      12
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 12
		 -> STR_3(CODE[6]), STR_2(CODE[10]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_LCD_Write_String
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1440
                                             10 COMRAM     2     2      0
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                     _LCD_Write_Char
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     6     4      2     438
                                              4 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     649
                                              2 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     135
                                              2 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              1     1      0      75
                                              1 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CMD
       _LCD_DATA
   _LCD_Init
     _LCD_CMD
     _LCD_DATA
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_Char
     _LCD_DATA
   _LCD_Write_String
     _LCD_Write_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      C       C       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Oct 17 16:48:31 2024

                       l17 08A8                         l18 08A8                         l51 09E6  
                       l43 09A2                         l60 095A                         l45 09B8  
                       l54 0A9C                         l62 098A                         l47 09CE  
                       l49 09E4                         l57 0AB8                         l65 0928  
                       l74 0A3C                         l68 0A84                         u10 099C  
                       u11 0998                         u20 09B2                         u21 09AE  
                       u30 09C8                         u31 09C4                         u40 09DE  
                       u41 09DA                         u80 093C                         u81 0938  
                       u90 096C                         u91 0968                        l800 0A90  
                      l802 0A92                        l810 08B6                        l804 0A9A  
                      l820 08EC                        l812 08B8                        l900 081E  
                      l822 08F2                        l814 08BE                        l806 08B0  
                      l910 083C                        l902 081E                        l760 09A4  
                      l824 0AAC                        l816 08CE                        l808 08B4  
                      l920 087A                        l912 0854                        l904 0822  
                      l770 09DE                        l762 09B2                        l818 08D6  
                      l922 0884                        l914 085E                        l906 0826  
                      l764 09BA                        l756 098E                        l780 0A58  
                      l772 0A40                        l924 0890                        l916 086A  
                      l908 0830                        l766 09C8                        l758 099C  
                      l790 0A72                        l782 0A60                        l774 0A4C  
                      l918 0874                        l768 09D0                        l880 093C  
                      l792 0A7A                        l784 0A62                        l776 0A4E  
                      l890 0984                        l882 094E                        l794 0A7C  
                      l786 0A6A                        l778 0A56                        l796 0A88  
                      l884 0954                        l788 0A70                        l892 09E8  
                      l798 0A8A                        l886 096C                        l878 092C  
                      l894 09F4                        l888 097E                        l896 0A10  
                      l898 0A14                        _RB0 007C08                        _RB1 007C09  
                      _RB2 007C0A                        _RB3 007C0B                        _RB4 007C0C  
                      _RB5 007C0D                        u100 0A3C                        u101 0A38  
                      u117 0846                        u207 08F4                        u127 089A  
                      u217 0A94                        u137 0A5A                        u147 0A64  
                      u157 0A74                        u167 0A7E                        u177 08C4  
                      u187 08D0                        u197 08E2                        wreg 000FE8  
          __end_of_LCD_CMD 0A9E             _LCD_Set_Cursor 092A        LCD_Write_String@str 0005  
                     STR_1 0801                       STR_2 080D                       STR_3 0817  
        ?_LCD_Write_String 0005                       _main 081E         __size_of_LCD_Clear 000E  
                     start 0000         ??_LCD_Write_String 0007               ___param_bank 000000  
         __end_of_LCD_DATA 09E8           __end_of_LCD_Init 092A                      ?_main 0001  
                    _TRISB 000F93     __end_of_LCD_Set_Cursor 098C                      tablat 000FF5  
                    status 000FD8             _LCD_Write_Char 0A3E            __initialization 0A9E  
             __end_of_main 08B0                     ??_main 000B          __end_of_LCD_Clear 0ABA  
            __activetblptr 000001                  ??_LCD_CMD 0002            ?_LCD_Set_Cursor 0003  
                   _TRISB4 007C9C                     _TRISB5 007C9D     __end_of_LCD_Write_Char 0A86  
                   isa$std 000001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8            LCD_Set_Cursor@c 0003  
          LCD_Set_Cursor@r 0004                  ?_LCD_DATA 0001                 __accesstop 0060  
  __end_of__initialization 0A9E                  ?_LCD_Init 0001              ___rparam_used 000001  
          ?_LCD_Write_Char 0001             __pcstackCOMRAM 0001                 ??_LCD_DATA 0001  
               ??_LCD_Init 0003  __size_of_LCD_Write_String 0056                    _LCD_CMD 0A86  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 0800  
                  __pcinit 0A9E                    __ramtop 0800           ??_LCD_Set_Cursor 0004  
                  __ptext0 081E                    __ptext1 09E8                    __ptext2 0A3E  
                  __ptext3 092A                    __ptext4 08B0                    __ptext5 0AAC  
                  __ptext6 0A86                    __ptext7 098C                  _LCD_Clear 0AAC  
     end_of_initialization 0A9E                 LCD_CMD@CMD 0002                 ?_LCD_Clear 0001  
        LCD_Write_String@i 0009           ??_LCD_Write_Char 0002          __size_of_LCD_DATA 005C  
        __size_of_LCD_Init 007A           _LCD_Write_String 09E8        start_initialization 0A9E  
                 ?_LCD_CMD 0001                ??_LCD_Clear 0003                __smallconst 0800  
                 _LCD_DATA 098C                   _LCD_Init 08B0           __size_of_LCD_CMD 0018  
 __end_of_LCD_Write_String 0A3E                   __Hrparam 0000                   __Lrparam 0000  
      LCD_Write_Char@High4 0003               __Lsmallconst 0800    __size_of_LCD_Set_Cursor 0062  
            __size_of_main 0092                   isa$xinst 000000        LCD_Set_Cursor@High4 0006  
       LCD_Write_Char@Data 0004         LCD_Write_Char@Low4 0002    __size_of_LCD_Write_Char 0048  
       LCD_Set_Cursor@Low4 0005         LCD_Set_Cursor@Temp 0007               LCD_DATA@Data 0001  
