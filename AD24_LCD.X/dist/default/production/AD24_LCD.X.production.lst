

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Oct 15 16:52:57 2024

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     _TRISB	set	3987
    58  0000                     _TRISB4	set	31900
    59  0000                     _TRISB5	set	31901
    60  0000                     _RB4	set	31756
    61  0000                     _RB5	set	31757
    62  0000                     _RB3	set	31755
    63  0000                     _RB2	set	31754
    64  0000                     _RB1	set	31753
    65  0000                     _RB0	set	31752
    66                           
    67                           	psect	smallconst
    68  000800                     __psmallconst:
    69                           	callstack 0
    70  000800  00                 	db	0
    71  000801                     STR_1:
    72  000801  4B                 	db	75	;'K'
    73  000802  68                 	db	104	;'h'
    74  000803  61                 	db	97	;'a'
    75  000804  6C                 	db	108	;'l'
    76  000805  65                 	db	101	;'e'
    77  000806  64                 	db	100	;'d'
    78  000807  20                 	db	32
    79  000808  4D                 	db	77	;'M'
    80  000809  61                 	db	97	;'a'
    81  00080A  67                 	db	103	;'g'
    82  00080B  64                 	db	100	;'d'
    83  00080C  79                 	db	121	;'y'
    84  00080D  00                 	db	0
    85  00080E  00                 	db	0
    86  00080F                     STR_2:
    87  00080F  20                 	db	32
    88  000810  20                 	db	32
    89  000811  44                 	db	68	;'D'
    90  000812  65                 	db	101	;'e'
    91  000813  65                 	db	101	;'e'
    92  000814  70                 	db	112	;'p'
    93  000815  42                 	db	66	;'B'
    94  000816  6C                 	db	108	;'l'
    95  000817  75                 	db	117	;'u'
    96  000818  65                 	db	101	;'e'
    97  000819  00                 	db	0
    98  00081A  00                 	db	0
    99  00081B  00                 	db	0	; dummy byte at the end
   100  0000                     
   101                           ; #config settings
   102                           
   103                           	psect	cinit
   104  000ACE                     __pcinit:
   105                           	callstack 0
   106  000ACE                     start_initialization:
   107                           	callstack 0
   108  000ACE                     __initialization:
   109                           	callstack 0
   110  000ACE                     end_of_initialization:
   111                           	callstack 0
   112  000ACE                     __end_of__initialization:
   113                           	callstack 0
   114  000ACE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   115  000AD0  6EF8               	movwf	tblptru,c
   116  000AD2  0E08               	movlw	high __Lsmallconst
   117  000AD4  6EF7               	movwf	tblptrh,c
   118  000AD6  0100               	movlb	0
   119  000AD8  EF0E  F004         	goto	_main	;jump to C main() function
   120                           
   121                           	psect	cstackCOMRAM
   122  000001                     __pcstackCOMRAM:
   123                           	callstack 0
   124  000001                     LCD_DATA@Data:
   125                           	callstack 0
   126                           
   127                           ; 1 bytes @ 0x0
   128  000001                     	ds	1
   129  000002                     LCD_CMD@CMD:
   130                           	callstack 0
   131  000002                     LCD_Write_Char@Low4:
   132                           	callstack 0
   133                           
   134                           ; 1 bytes @ 0x1
   135  000002                     	ds	1
   136  000003                     ??_LCD_Init:
   137  000003                     LCD_Set_Cursor@c:
   138                           	callstack 0
   139  000003                     LCD_Write_Char@High4:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0x2
   143  000003                     	ds	1
   144  000004                     LCD_Set_Cursor@r:
   145                           	callstack 0
   146  000004                     LCD_Write_Char@Data:
   147                           	callstack 0
   148                           
   149                           ; 1 bytes @ 0x3
   150  000004                     	ds	1
   151  000005                     LCD_Set_Cursor@Low4:
   152                           	callstack 0
   153  000005                     LCD_Write_String@str:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x4
   157  000005                     	ds	1
   158  000006                     LCD_Set_Cursor@High4:
   159                           	callstack 0
   160                           
   161                           ; 1 bytes @ 0x5
   162  000006                     	ds	1
   163  000007                     ??_LCD_Write_String:
   164  000007                     LCD_Set_Cursor@Temp:
   165                           	callstack 0
   166                           
   167                           ; 1 bytes @ 0x6
   168  000007                     	ds	2
   169  000009                     LCD_Write_String@i:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x8
   173  000009                     	ds	2
   174  00000B                     ??_main:
   175                           
   176                           ; 1 bytes @ 0xA
   177  00000B                     	ds	2
   178  00000D                     main@i:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0xC
   182  00000D                     	ds	2
   183  00000F                     main@i_74:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0xE
   187  00000F                     	ds	2
   188                           
   189 ;;
   190 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   191 ;;
   192 ;; *************** function _main *****************
   193 ;; Defined at:
   194 ;;		line 30 in file "main_lcd.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;  i               2   14[COMRAM] int 
   199 ;;  i               2   12[COMRAM] int 
   200 ;; Return value:  Size  Location     Type
   201 ;;                  1    wreg      void 
   202 ;; Registers used:
   203 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   204 ;; Tracked objects:
   205 ;;		On entry : 0/0
   206 ;;		On exit  : 0/0
   207 ;;		Unchanged: 0/0
   208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   209 ;;      Params:         0       0       0       0       0       0       0       0       0
   210 ;;      Locals:         4       0       0       0       0       0       0       0       0
   211 ;;      Temps:          2       0       0       0       0       0       0       0       0
   212 ;;      Totals:         6       0       0       0       0       0       0       0       0
   213 ;;Total ram usage:        6 bytes
   214 ;; Hardware stack levels required when called: 3
   215 ;; This function calls:
   216 ;;		_LCD_Clear
   217 ;;		_LCD_Init
   218 ;;		_LCD_SL
   219 ;;		_LCD_SR
   220 ;;		_LCD_Set_Cursor
   221 ;;		_LCD_Write_String
   222 ;; This function is called by:
   223 ;;		Startup code after reset
   224 ;; This function uses a non-reentrant model
   225 ;;
   226                           
   227                           	psect	text0
   228  00081C                     __ptext0:
   229                           	callstack 0
   230  00081C                     _main:
   231                           	callstack 28
   232  00081C                     
   233                           ;main_lcd.c: 32:     LCD_Init();
   234  00081C  EC70  F004         	call	_LCD_Init	;wreg free
   235                           
   236                           ;main_lcd.c: 33:     LCD_Clear();
   237  000820  EC7C  F005         	call	_LCD_Clear	;wreg free
   238  000824                     
   239                           ;main_lcd.c: 34:     LCD_Set_Cursor(1,1);
   240  000824  0E01               	movlw	1
   241  000826  6E03               	movwf	LCD_Set_Cursor@c^0,c
   242  000828  0E01               	movlw	1
   243  00082A  ECAD  F004         	call	_LCD_Set_Cursor
   244  00082E                     
   245                           ;main_lcd.c: 35:     LCD_Write_String("Khaled Magdy\0");
   246  00082E  0E01               	movlw	low STR_1
   247  000830  6E05               	movwf	LCD_Write_String@str^0,c
   248  000832  0E08               	movlw	high STR_1
   249  000834  6E06               	movwf	(LCD_Write_String@str+1)^0,c
   250  000836  EC0C  F005         	call	_LCD_Write_String	;wreg free
   251  00083A                     
   252                           ;main_lcd.c: 36:     LCD_Set_Cursor(2,1);
   253  00083A  0E01               	movlw	1
   254  00083C  6E03               	movwf	LCD_Set_Cursor@c^0,c
   255  00083E  0E02               	movlw	2
   256  000840  ECAD  F004         	call	_LCD_Set_Cursor
   257  000844                     
   258                           ;main_lcd.c: 37:     LCD_Write_String("  DeepBlue\0");
   259  000844  0E0F               	movlw	low STR_2
   260  000846  6E05               	movwf	LCD_Write_String@str^0,c
   261  000848  0E08               	movlw	high STR_2
   262  00084A  6E06               	movwf	(LCD_Write_String@str+1)^0,c
   263  00084C  EC0C  F005         	call	_LCD_Write_String	;wreg free
   264  000850                     l926:
   265                           
   266                           ;main_lcd.c: 39:     {;main_lcd.c: 40:         for(int i=0; i<4; i++)
   267  000850  0E00               	movlw	0
   268  000852  6E0E               	movwf	(main@i+1)^0,c
   269  000854  0E00               	movlw	0
   270  000856  6E0D               	movwf	main@i^0,c
   271  000858                     l932:
   272                           
   273                           ;main_lcd.c: 41:         {;main_lcd.c: 42:           _delay((unsigned long)((300)*(40000
      +                          00/4000.0)));
   274  000858  0E02               	movlw	2
   275  00085A  6E0C               	movwf	(??_main+1)^0,c
   276  00085C  0E86               	movlw	134
   277  00085E  6E0B               	movwf	??_main^0,c
   278  000860  0E99               	movlw	153
   279  000862                     u157:
   280  000862  2EE8               	decfsz	wreg,f,c
   281  000864  D7FE               	bra	u157
   282  000866  2E0B               	decfsz	??_main^0,f,c
   283  000868  D7FC               	bra	u157
   284  00086A  2E0C               	decfsz	(??_main+1)^0,f,c
   285  00086C  D7FA               	bra	u157
   286  00086E  F000               	nop	
   287  000870                     
   288                           ;main_lcd.c: 43:           LCD_SR();
   289  000870  EC6E  F005         	call	_LCD_SR	;wreg free
   290  000874                     
   291                           ;main_lcd.c: 44:         }
   292  000874  4A0D               	infsnz	main@i^0,f,c
   293  000876  2A0E               	incf	(main@i+1)^0,f,c
   294  000878  BE0E               	btfsc	(main@i+1)^0,7,c
   295  00087A  EF48  F004         	goto	u131
   296  00087E  500E               	movf	(main@i+1)^0,w,c
   297  000880  E109               	bnz	u130
   298  000882  0E04               	movlw	4
   299  000884  5C0D               	subwf	main@i^0,w,c
   300  000886  A0D8               	btfss	status,0,c
   301  000888  EF48  F004         	goto	u131
   302  00088C  EF4A  F004         	goto	u130
   303  000890                     u131:
   304  000890  EF2C  F004         	goto	l932
   305  000894                     u130:
   306  000894                     
   307                           ;main_lcd.c: 45:         for(int i=0; i<4; i++)
   308  000894  0E00               	movlw	0
   309  000896  6E10               	movwf	(main@i_74+1)^0,c
   310  000898  0E00               	movlw	0
   311  00089A  6E0F               	movwf	main@i_74^0,c
   312  00089C                     l946:
   313                           
   314                           ;main_lcd.c: 46:         {;main_lcd.c: 47:           _delay((unsigned long)((300)*(40000
      +                          00/4000.0)));
   315  00089C  0E02               	movlw	2
   316  00089E  6E0C               	movwf	(??_main+1)^0,c
   317  0008A0  0E86               	movlw	134
   318  0008A2  6E0B               	movwf	??_main^0,c
   319  0008A4  0E99               	movlw	153
   320  0008A6                     u167:
   321  0008A6  2EE8               	decfsz	wreg,f,c
   322  0008A8  D7FE               	bra	u167
   323  0008AA  2E0B               	decfsz	??_main^0,f,c
   324  0008AC  D7FC               	bra	u167
   325  0008AE  2E0C               	decfsz	(??_main+1)^0,f,c
   326  0008B0  D7FA               	bra	u167
   327  0008B2  F000               	nop	
   328  0008B4                     
   329                           ;main_lcd.c: 48:           LCD_SL();
   330  0008B4  EC75  F005         	call	_LCD_SL	;wreg free
   331  0008B8                     
   332                           ;main_lcd.c: 49:         }
   333  0008B8  4A0F               	infsnz	main@i_74^0,f,c
   334  0008BA  2A10               	incf	(main@i_74+1)^0,f,c
   335  0008BC  BE10               	btfsc	(main@i_74+1)^0,7,c
   336  0008BE  EF6A  F004         	goto	u141
   337  0008C2  5010               	movf	(main@i_74+1)^0,w,c
   338  0008C4  E109               	bnz	u140
   339  0008C6  0E04               	movlw	4
   340  0008C8  5C0F               	subwf	main@i_74^0,w,c
   341  0008CA  A0D8               	btfss	status,0,c
   342  0008CC  EF6A  F004         	goto	u141
   343  0008D0  EF6C  F004         	goto	u140
   344  0008D4                     u141:
   345  0008D4  EF4E  F004         	goto	l946
   346  0008D8                     u140:
   347  0008D8  EF28  F004         	goto	l926
   348  0008DC  EF00  F000         	goto	start
   349  0008E0                     __end_of_main:
   350                           	callstack 0
   351                           
   352 ;; *************** function _LCD_Write_String *****************
   353 ;; Defined at:
   354 ;;		line 150 in file "main_lcd.c"
   355 ;; Parameters:    Size  Location     Type
   356 ;;  str             2    4[COMRAM] PTR unsigned char 
   357 ;;		 -> STR_2(12), STR_1(14), 
   358 ;; Auto vars:     Size  Location     Type
   359 ;;  i               2    8[COMRAM] int 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   369 ;;      Params:         2       0       0       0       0       0       0       0       0
   370 ;;      Locals:         2       0       0       0       0       0       0       0       0
   371 ;;      Temps:          2       0       0       0       0       0       0       0       0
   372 ;;      Totals:         6       0       0       0       0       0       0       0       0
   373 ;;Total ram usage:        6 bytes
   374 ;; Hardware stack levels used: 1
   375 ;; Hardware stack levels required when called: 2
   376 ;; This function calls:
   377 ;;		_LCD_Write_Char
   378 ;; This function is called by:
   379 ;;		_main
   380 ;; This function uses a non-reentrant model
   381 ;;
   382                           
   383                           	psect	text1
   384  000A18                     __ptext1:
   385                           	callstack 0
   386  000A18                     _LCD_Write_String:
   387                           	callstack 28
   388  000A18                     
   389                           ;main_lcd.c: 150: void LCD_Write_String(char *str);main_lcd.c: 151: {;main_lcd.c: 152:  
      +                             int i;;main_lcd.c: 153:     for(i=0;str[i]!='\0';i++)
   390  000A18  0E00               	movlw	0
   391  000A1A  6E0A               	movwf	(LCD_Write_String@i+1)^0,c
   392  000A1C  0E00               	movlw	0
   393  000A1E  6E09               	movwf	LCD_Write_String@i^0,c
   394  000A20  EF22  F005         	goto	l914
   395  000A24                     l910:
   396                           
   397                           ;main_lcd.c: 154:        LCD_Write_Char(str[i]);
   398  000A24  5009               	movf	LCD_Write_String@i^0,w,c
   399  000A26  2405               	addwf	LCD_Write_String@str^0,w,c
   400  000A28  6E07               	movwf	??_LCD_Write_String^0,c
   401  000A2A  500A               	movf	(LCD_Write_String@i+1)^0,w,c
   402  000A2C  2006               	addwfc	(LCD_Write_String@str+1)^0,w,c
   403  000A2E  6E08               	movwf	(??_LCD_Write_String+1)^0,c
   404  000A30  C007  FFF6         	movff	??_LCD_Write_String,tblptrl
   405  000A34  C008  FFF7         	movff	??_LCD_Write_String+1,tblptrh
   406  000A38                     	if	0	;tblptru may be non-zero
   407  000A38                     	endif
   408  000A38                     	if	0	;tblptru may be non-zero
   409  000A38                     	endif
   410  000A38  0008               	tblrd		*
   411  000A3A  50F5               	movf	tablat,w,c
   412  000A3C  EC37  F005         	call	_LCD_Write_Char
   413  000A40  4A09               	infsnz	LCD_Write_String@i^0,f,c
   414  000A42  2A0A               	incf	(LCD_Write_String@i+1)^0,f,c
   415  000A44                     l914:
   416  000A44  5009               	movf	LCD_Write_String@i^0,w,c
   417  000A46  2405               	addwf	LCD_Write_String@str^0,w,c
   418  000A48  6E07               	movwf	??_LCD_Write_String^0,c
   419  000A4A  500A               	movf	(LCD_Write_String@i+1)^0,w,c
   420  000A4C  2006               	addwfc	(LCD_Write_String@str+1)^0,w,c
   421  000A4E  6E08               	movwf	(??_LCD_Write_String+1)^0,c
   422  000A50  C007  FFF6         	movff	??_LCD_Write_String,tblptrl
   423  000A54  C008  FFF7         	movff	??_LCD_Write_String+1,tblptrh
   424  000A58                     	if	0	;tblptru may be non-zero
   425  000A58                     	endif
   426  000A58                     	if	0	;tblptru may be non-zero
   427  000A58                     	endif
   428  000A58  0008               	tblrd		*
   429  000A5A  50F5               	movf	tablat,w,c
   430  000A5C  0900               	iorlw	0
   431  000A5E  A4D8               	btfss	status,2,c
   432  000A60  EF34  F005         	goto	u121
   433  000A64  EF36  F005         	goto	u120
   434  000A68                     u121:
   435  000A68  EF12  F005         	goto	l910
   436  000A6C                     u120:
   437  000A6C  0012               	return		;funcret
   438  000A6E                     __end_of_LCD_Write_String:
   439                           	callstack 0
   440                           
   441 ;; *************** function _LCD_Write_Char *****************
   442 ;; Defined at:
   443 ;;		line 133 in file "main_lcd.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;  Data            1    wreg     unsigned char 
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  Data            1    3[COMRAM] unsigned char 
   448 ;;  High4           1    2[COMRAM] unsigned char 
   449 ;;  Low4            1    1[COMRAM] unsigned char 
   450 ;; Return value:  Size  Location     Type
   451 ;;                  1    wreg      void 
   452 ;; Registers used:
   453 ;;		wreg, status,2, status,0, cstack
   454 ;; Tracked objects:
   455 ;;		On entry : 0/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   459 ;;      Params:         0       0       0       0       0       0       0       0       0
   460 ;;      Locals:         3       0       0       0       0       0       0       0       0
   461 ;;      Temps:          0       0       0       0       0       0       0       0       0
   462 ;;      Totals:         3       0       0       0       0       0       0       0       0
   463 ;;Total ram usage:        3 bytes
   464 ;; Hardware stack levels used: 1
   465 ;; Hardware stack levels required when called: 1
   466 ;; This function calls:
   467 ;;		_LCD_DATA
   468 ;; This function is called by:
   469 ;;		_LCD_Write_String
   470 ;; This function uses a non-reentrant model
   471 ;;
   472                           
   473                           	psect	text2
   474  000A6E                     __ptext2:
   475                           	callstack 0
   476  000A6E                     _LCD_Write_Char:
   477                           	callstack 28
   478                           
   479                           ;incstack = 0
   480                           ;LCD_Write_Char@Data stored from wreg
   481  000A6E  6E04               	movwf	LCD_Write_Char@Data^0,c
   482  000A70                     
   483                           ;main_lcd.c: 133: void LCD_Write_Char(char Data);main_lcd.c: 134: {;main_lcd.c: 135:    
      +                          char Low4,High4;;main_lcd.c: 136:    Low4 = Data & 0x0F;
   484  000A70  5004               	movf	LCD_Write_Char@Data^0,w,c
   485  000A72  0B0F               	andlw	15
   486  000A74  6E02               	movwf	LCD_Write_Char@Low4^0,c
   487                           
   488                           ;main_lcd.c: 137:    High4 = Data & 0xF0;
   489  000A76  5004               	movf	LCD_Write_Char@Data^0,w,c
   490  000A78  0BF0               	andlw	240
   491  000A7A  6E03               	movwf	LCD_Write_Char@High4^0,c
   492  000A7C                     
   493                           ;main_lcd.c: 138:    RB5 = 1;
   494  000A7C  8A81               	bsf	3969,5,c	;volatile
   495  000A7E                     
   496                           ;main_lcd.c: 139:    LCD_DATA(High4>>4);
   497  000A7E  3803               	swapf	LCD_Write_Char@High4^0,w,c
   498  000A80  0B0F               	andlw	15
   499  000A82  ECDE  F004         	call	_LCD_DATA
   500  000A86                     
   501                           ;main_lcd.c: 140:    RB4 = 1;
   502  000A86  8881               	bsf	3969,4,c	;volatile
   503  000A88                     
   504                           ;main_lcd.c: 141:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   505  000A88  0EA6               	movlw	166
   506  000A8A                     u177:
   507  000A8A  2EE8               	decfsz	wreg,f,c
   508  000A8C  D7FE               	bra	u177
   509  000A8E  D000               	nop2	
   510  000A90                     
   511                           ;main_lcd.c: 142:    RB4 = 0;
   512  000A90  9881               	bcf	3969,4,c	;volatile
   513  000A92                     
   514                           ;main_lcd.c: 143:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   515  000A92  0EA6               	movlw	166
   516  000A94                     u187:
   517  000A94  2EE8               	decfsz	wreg,f,c
   518  000A96  D7FE               	bra	u187
   519  000A98  D000               	nop2	
   520  000A9A                     
   521                           ;main_lcd.c: 144:    LCD_DATA(Low4);
   522  000A9A  5002               	movf	LCD_Write_Char@Low4^0,w,c
   523  000A9C  ECDE  F004         	call	_LCD_DATA
   524  000AA0                     
   525                           ;main_lcd.c: 145:    RB4 = 1;
   526  000AA0  8881               	bsf	3969,4,c	;volatile
   527  000AA2                     
   528                           ;main_lcd.c: 146:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   529  000AA2  0EA6               	movlw	166
   530  000AA4                     u197:
   531  000AA4  2EE8               	decfsz	wreg,f,c
   532  000AA6  D7FE               	bra	u197
   533  000AA8  D000               	nop2	
   534  000AAA                     
   535                           ;main_lcd.c: 147:    RB4 = 0;
   536  000AAA  9881               	bcf	3969,4,c	;volatile
   537  000AAC                     
   538                           ;main_lcd.c: 148:    _delay((unsigned long)((500)*(4000000/4000000.0)));
   539  000AAC  0EA6               	movlw	166
   540  000AAE                     u207:
   541  000AAE  2EE8               	decfsz	wreg,f,c
   542  000AB0  D7FE               	bra	u207
   543  000AB2  D000               	nop2	
   544  000AB4  0012               	return		;funcret
   545  000AB6                     __end_of_LCD_Write_Char:
   546                           	callstack 0
   547                           
   548 ;; *************** function _LCD_Set_Cursor *****************
   549 ;; Defined at:
   550 ;;		line 90 in file "main_lcd.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;  r               1    wreg     unsigned char 
   553 ;;  c               1    2[COMRAM] unsigned char 
   554 ;; Auto vars:     Size  Location     Type
   555 ;;  r               1    3[COMRAM] unsigned char 
   556 ;;  Temp            1    6[COMRAM] unsigned char 
   557 ;;  High4           1    5[COMRAM] unsigned char 
   558 ;;  Low4            1    4[COMRAM] unsigned char 
   559 ;; Return value:  Size  Location     Type
   560 ;;                  1    wreg      void 
   561 ;; Registers used:
   562 ;;		wreg, status,2, status,0, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   568 ;;      Params:         1       0       0       0       0       0       0       0       0
   569 ;;      Locals:         4       0       0       0       0       0       0       0       0
   570 ;;      Temps:          0       0       0       0       0       0       0       0       0
   571 ;;      Totals:         5       0       0       0       0       0       0       0       0
   572 ;;Total ram usage:        5 bytes
   573 ;; Hardware stack levels used: 1
   574 ;; Hardware stack levels required when called: 2
   575 ;; This function calls:
   576 ;;		_LCD_CMD
   577 ;; This function is called by:
   578 ;;		_main
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           	psect	text3
   583  00095A                     __ptext3:
   584                           	callstack 0
   585  00095A                     _LCD_Set_Cursor:
   586                           	callstack 28
   587                           
   588                           ;incstack = 0
   589                           ;LCD_Set_Cursor@r stored from wreg
   590  00095A  6E04               	movwf	LCD_Set_Cursor@r^0,c
   591  00095C                     
   592                           ;main_lcd.c: 90: void LCD_Set_Cursor(unsigned char r, unsigned char c);main_lcd.c: 91: {
      +                          ;main_lcd.c: 92:     unsigned char Temp,Low4,High4;;main_lcd.c: 93:     if(r == 1)
   593  00095C  0404               	decf	LCD_Set_Cursor@r^0,w,c
   594  00095E  A4D8               	btfss	status,2,c
   595  000960  EFB4  F004         	goto	u101
   596  000964  EFB6  F004         	goto	u100
   597  000968                     u101:
   598  000968  EFC5  F004         	goto	l64
   599  00096C                     u100:
   600  00096C                     
   601                           ;main_lcd.c: 94:     {;main_lcd.c: 95:       Temp = 0x80 + c - 1;
   602  00096C  5003               	movf	LCD_Set_Cursor@c^0,w,c
   603  00096E  0F7F               	addlw	127
   604  000970  6E07               	movwf	LCD_Set_Cursor@Temp^0,c
   605                           
   606                           ;main_lcd.c: 96:       High4 = Temp >> 4;
   607  000972  3807               	swapf	LCD_Set_Cursor@Temp^0,w,c
   608  000974  0B0F               	andlw	15
   609  000976  6E06               	movwf	LCD_Set_Cursor@High4^0,c
   610                           
   611                           ;main_lcd.c: 97:       Low4 = Temp & 0x0F;
   612  000978  5007               	movf	LCD_Set_Cursor@Temp^0,w,c
   613  00097A  0B0F               	andlw	15
   614  00097C  6E05               	movwf	LCD_Set_Cursor@Low4^0,c
   615  00097E                     
   616                           ;main_lcd.c: 98:       LCD_CMD(High4);
   617  00097E  5006               	movf	LCD_Set_Cursor@High4^0,w,c
   618  000980  EC5B  F005         	call	_LCD_CMD
   619  000984                     
   620                           ;main_lcd.c: 99:       LCD_CMD(Low4);
   621  000984  5005               	movf	LCD_Set_Cursor@Low4^0,w,c
   622  000986  EC5B  F005         	call	_LCD_CMD
   623  00098A                     l64:
   624                           
   625                           ;main_lcd.c: 101:     if(r == 2)
   626  00098A  0E02               	movlw	2
   627  00098C  1804               	xorwf	LCD_Set_Cursor@r^0,w,c
   628  00098E  A4D8               	btfss	status,2,c
   629  000990  EFCC  F004         	goto	u111
   630  000994  EFCE  F004         	goto	u110
   631  000998                     u111:
   632  000998  EFDD  F004         	goto	l66
   633  00099C                     u110:
   634  00099C                     
   635                           ;main_lcd.c: 102:     {;main_lcd.c: 103:       Temp = 0xC0 + c - 1;
   636  00099C  5003               	movf	LCD_Set_Cursor@c^0,w,c
   637  00099E  0FBF               	addlw	191
   638  0009A0  6E07               	movwf	LCD_Set_Cursor@Temp^0,c
   639                           
   640                           ;main_lcd.c: 104:       High4 = Temp >> 4;
   641  0009A2  3807               	swapf	LCD_Set_Cursor@Temp^0,w,c
   642  0009A4  0B0F               	andlw	15
   643  0009A6  6E06               	movwf	LCD_Set_Cursor@High4^0,c
   644                           
   645                           ;main_lcd.c: 105:       Low4 = Temp & 0x0F;
   646  0009A8  5007               	movf	LCD_Set_Cursor@Temp^0,w,c
   647  0009AA  0B0F               	andlw	15
   648  0009AC  6E05               	movwf	LCD_Set_Cursor@Low4^0,c
   649  0009AE                     
   650                           ;main_lcd.c: 106:       LCD_CMD(High4);
   651  0009AE  5006               	movf	LCD_Set_Cursor@High4^0,w,c
   652  0009B0  EC5B  F005         	call	_LCD_CMD
   653  0009B4                     
   654                           ;main_lcd.c: 107:       LCD_CMD(Low4);
   655  0009B4  5005               	movf	LCD_Set_Cursor@Low4^0,w,c
   656  0009B6  EC5B  F005         	call	_LCD_CMD
   657  0009BA                     l66:
   658  0009BA  0012               	return		;funcret
   659  0009BC                     __end_of_LCD_Set_Cursor:
   660                           	callstack 0
   661                           
   662 ;; *************** function _LCD_SR *****************
   663 ;; Defined at:
   664 ;;		line 161 in file "main_lcd.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;		None
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, status,2, cstack
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   678 ;;      Params:         0       0       0       0       0       0       0       0       0
   679 ;;      Locals:         0       0       0       0       0       0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0       0       0
   681 ;;      Totals:         0       0       0       0       0       0       0       0       0
   682 ;;Total ram usage:        0 bytes
   683 ;; Hardware stack levels used: 1
   684 ;; Hardware stack levels required when called: 2
   685 ;; This function calls:
   686 ;;		_LCD_CMD
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text4
   693  000ADC                     __ptext4:
   694                           	callstack 0
   695  000ADC                     _LCD_SR:
   696                           	callstack 28
   697  000ADC                     
   698                           ;main_lcd.c: 163:     LCD_CMD(0x01);
   699  000ADC  0E01               	movlw	1
   700  000ADE  EC5B  F005         	call	_LCD_CMD
   701                           
   702                           ;main_lcd.c: 164:     LCD_CMD(0x0C);
   703  000AE2  0E0C               	movlw	12
   704  000AE4  EC5B  F005         	call	_LCD_CMD
   705  000AE8  0012               	return		;funcret
   706  000AEA                     __end_of_LCD_SR:
   707                           	callstack 0
   708                           
   709 ;; *************** function _LCD_SL *****************
   710 ;; Defined at:
   711 ;;		line 156 in file "main_lcd.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;		None
   714 ;; Auto vars:     Size  Location     Type
   715 ;;		None
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg, status,2, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   725 ;;      Params:         0       0       0       0       0       0       0       0       0
   726 ;;      Locals:         0       0       0       0       0       0       0       0       0
   727 ;;      Temps:          0       0       0       0       0       0       0       0       0
   728 ;;      Totals:         0       0       0       0       0       0       0       0       0
   729 ;;Total ram usage:        0 bytes
   730 ;; Hardware stack levels used: 1
   731 ;; Hardware stack levels required when called: 2
   732 ;; This function calls:
   733 ;;		_LCD_CMD
   734 ;; This function is called by:
   735 ;;		_main
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           	psect	text5
   740  000AEA                     __ptext5:
   741                           	callstack 0
   742  000AEA                     _LCD_SL:
   743                           	callstack 28
   744  000AEA                     
   745                           ;main_lcd.c: 158:     LCD_CMD(0x01);
   746  000AEA  0E01               	movlw	1
   747  000AEC  EC5B  F005         	call	_LCD_CMD
   748                           
   749                           ;main_lcd.c: 159:     LCD_CMD(0x08);
   750  000AF0  0E08               	movlw	8
   751  000AF2  EC5B  F005         	call	_LCD_CMD
   752  000AF6  0012               	return		;funcret
   753  000AF8                     __end_of_LCD_SL:
   754                           	callstack 0
   755                           
   756 ;; *************** function _LCD_Init *****************
   757 ;; Defined at:
   758 ;;		line 110 in file "main_lcd.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;		None
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   772 ;;      Params:         0       0       0       0       0       0       0       0       0
   773 ;;      Locals:         0       0       0       0       0       0       0       0       0
   774 ;;      Temps:          1       0       0       0       0       0       0       0       0
   775 ;;      Totals:         1       0       0       0       0       0       0       0       0
   776 ;;Total ram usage:        1 bytes
   777 ;; Hardware stack levels used: 1
   778 ;; Hardware stack levels required when called: 2
   779 ;; This function calls:
   780 ;;		_LCD_CMD
   781 ;;		_LCD_DATA
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           	psect	text6
   788  0008E0                     __ptext6:
   789                           	callstack 0
   790  0008E0                     _LCD_Init:
   791                           	callstack 28
   792  0008E0                     
   793                           ;main_lcd.c: 113:   TRISB = 0x00;
   794  0008E0  0E00               	movlw	0
   795  0008E2  6E93               	movwf	147,c	;volatile
   796  0008E4                     
   797                           ;main_lcd.c: 114:   TRISB5 = 0;
   798  0008E4  9A93               	bcf	3987,5,c	;volatile
   799  0008E6                     
   800                           ;main_lcd.c: 115:   TRISB4 = 0;
   801  0008E6  9893               	bcf	3987,4,c	;volatile
   802  0008E8                     
   803                           ;main_lcd.c: 117:   LCD_DATA(0x00);
   804  0008E8  0E00               	movlw	0
   805  0008EA  ECDE  F004         	call	_LCD_DATA
   806  0008EE                     
   807                           ;main_lcd.c: 118:   _delay((unsigned long)((30)*(4000000/4000.0)));
   808  0008EE  0E27               	movlw	39
   809  0008F0  6E03               	movwf	??_LCD_Init^0,c
   810  0008F2  0EF5               	movlw	245
   811  0008F4                     u217:
   812  0008F4  2EE8               	decfsz	wreg,f,c
   813  0008F6  D7FE               	bra	u217
   814  0008F8  2E03               	decfsz	??_LCD_Init^0,f,c
   815  0008FA  D7FC               	bra	u217
   816  0008FC  F000               	nop	
   817  0008FE                     
   818                           ;main_lcd.c: 119:   _delay((unsigned long)((500)*(4000000/4000000.0)));
   819  0008FE  0EA6               	movlw	166
   820  000900                     u227:
   821  000900  2EE8               	decfsz	wreg,f,c
   822  000902  D7FE               	bra	u227
   823  000904  D000               	nop2	
   824  000906                     
   825                           ;main_lcd.c: 120:   LCD_CMD(0x03);
   826  000906  0E03               	movlw	3
   827  000908  EC5B  F005         	call	_LCD_CMD
   828                           
   829                           ;main_lcd.c: 121:   _delay((unsigned long)((5)*(4000000/4000.0)));
   830  00090C  0E07               	movlw	7
   831  00090E  6E03               	movwf	??_LCD_Init^0,c
   832  000910  0E7D               	movlw	125
   833  000912                     u237:
   834  000912  2EE8               	decfsz	wreg,f,c
   835  000914  D7FE               	bra	u237
   836  000916  2E03               	decfsz	??_LCD_Init^0,f,c
   837  000918  D7FC               	bra	u237
   838  00091A  F000               	nop	
   839  00091C                     
   840                           ;main_lcd.c: 122:   LCD_CMD(0x03);
   841  00091C  0E03               	movlw	3
   842  00091E  EC5B  F005         	call	_LCD_CMD
   843  000922                     
   844                           ;main_lcd.c: 123:   _delay((unsigned long)((150)*(4000000/4000000.0)));
   845  000922  0E32               	movlw	50
   846  000924                     u247:
   847  000924  2EE8               	decfsz	wreg,f,c
   848  000926  D7FE               	bra	u247
   849                           
   850                           ;main_lcd.c: 124:   LCD_CMD(0x03);
   851  000928  0E03               	movlw	3
   852  00092A  EC5B  F005         	call	_LCD_CMD
   853                           
   854                           ;main_lcd.c: 125:   LCD_CMD(0x02);
   855  00092E  0E02               	movlw	2
   856  000930  EC5B  F005         	call	_LCD_CMD
   857                           
   858                           ;main_lcd.c: 126:   LCD_CMD(0x02);
   859  000934  0E02               	movlw	2
   860  000936  EC5B  F005         	call	_LCD_CMD
   861                           
   862                           ;main_lcd.c: 127:   LCD_CMD(0x08);
   863  00093A  0E08               	movlw	8
   864  00093C  EC5B  F005         	call	_LCD_CMD
   865                           
   866                           ;main_lcd.c: 128:   LCD_CMD(0x00);
   867  000940  0E00               	movlw	0
   868  000942  EC5B  F005         	call	_LCD_CMD
   869                           
   870                           ;main_lcd.c: 129:   LCD_CMD(0x0C);
   871  000946  0E0C               	movlw	12
   872  000948  EC5B  F005         	call	_LCD_CMD
   873                           
   874                           ;main_lcd.c: 130:   LCD_CMD(0x00);
   875  00094C  0E00               	movlw	0
   876  00094E  EC5B  F005         	call	_LCD_CMD
   877                           
   878                           ;main_lcd.c: 131:   LCD_CMD(0x06);
   879  000952  0E06               	movlw	6
   880  000954  EC5B  F005         	call	_LCD_CMD
   881  000958  0012               	return		;funcret
   882  00095A                     __end_of_LCD_Init:
   883                           	callstack 0
   884                           
   885 ;; *************** function _LCD_Clear *****************
   886 ;; Defined at:
   887 ;;		line 85 in file "main_lcd.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;		None
   890 ;; Auto vars:     Size  Location     Type
   891 ;;		None
   892 ;; Return value:  Size  Location     Type
   893 ;;                  1    wreg      void 
   894 ;; Registers used:
   895 ;;		wreg, status,2, cstack
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   901 ;;      Params:         0       0       0       0       0       0       0       0       0
   902 ;;      Locals:         0       0       0       0       0       0       0       0       0
   903 ;;      Temps:          0       0       0       0       0       0       0       0       0
   904 ;;      Totals:         0       0       0       0       0       0       0       0       0
   905 ;;Total ram usage:        0 bytes
   906 ;; Hardware stack levels used: 1
   907 ;; Hardware stack levels required when called: 2
   908 ;; This function calls:
   909 ;;		_LCD_CMD
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text7
   916  000AF8                     __ptext7:
   917                           	callstack 0
   918  000AF8                     _LCD_Clear:
   919                           	callstack 28
   920  000AF8                     
   921                           ;main_lcd.c: 87:     LCD_CMD(0);
   922  000AF8  0E00               	movlw	0
   923  000AFA  EC5B  F005         	call	_LCD_CMD
   924                           
   925                           ;main_lcd.c: 88:     LCD_CMD(1);
   926  000AFE  0E01               	movlw	1
   927  000B00  EC5B  F005         	call	_LCD_CMD
   928  000B04  0012               	return		;funcret
   929  000B06                     __end_of_LCD_Clear:
   930                           	callstack 0
   931                           
   932 ;; *************** function _LCD_CMD *****************
   933 ;; Defined at:
   934 ;;		line 74 in file "main_lcd.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  CMD             1    wreg     unsigned char 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  CMD             1    1[COMRAM] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, status,2, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   948 ;;      Params:         0       0       0       0       0       0       0       0       0
   949 ;;      Locals:         1       0       0       0       0       0       0       0       0
   950 ;;      Temps:          0       0       0       0       0       0       0       0       0
   951 ;;      Totals:         1       0       0       0       0       0       0       0       0
   952 ;;Total ram usage:        1 bytes
   953 ;; Hardware stack levels used: 1
   954 ;; Hardware stack levels required when called: 1
   955 ;; This function calls:
   956 ;;		_LCD_DATA
   957 ;; This function is called by:
   958 ;;		_LCD_Clear
   959 ;;		_LCD_Set_Cursor
   960 ;;		_LCD_Init
   961 ;;		_LCD_SL
   962 ;;		_LCD_SR
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text8
   967  000AB6                     __ptext8:
   968                           	callstack 0
   969  000AB6                     _LCD_CMD:
   970                           	callstack 28
   971                           
   972                           ;incstack = 0
   973                           ;LCD_CMD@CMD stored from wreg
   974  000AB6  6E02               	movwf	LCD_CMD@CMD^0,c
   975  000AB8                     
   976                           ;main_lcd.c: 74: void LCD_CMD(unsigned char CMD);main_lcd.c: 75: {;main_lcd.c: 77:     R
      +                          B5 = 0;
   977  000AB8  9A81               	bcf	3969,5,c	;volatile
   978  000ABA                     
   979                           ;main_lcd.c: 79:     LCD_DATA(CMD);
   980  000ABA  5002               	movf	LCD_CMD@CMD^0,w,c
   981  000ABC  ECDE  F004         	call	_LCD_DATA
   982  000AC0                     
   983                           ;main_lcd.c: 81:     RB4 = 1;
   984  000AC0  8881               	bsf	3969,4,c	;volatile
   985  000AC2                     
   986                           ;main_lcd.c: 82:     _delay((unsigned long)((500)*(4000000/4000000.0)));
   987  000AC2  0EA6               	movlw	166
   988  000AC4                     u257:
   989  000AC4  2EE8               	decfsz	wreg,f,c
   990  000AC6  D7FE               	bra	u257
   991  000AC8  D000               	nop2	
   992  000ACA                     
   993                           ;main_lcd.c: 83:     RB4 = 0;
   994  000ACA  9881               	bcf	3969,4,c	;volatile
   995  000ACC  0012               	return		;funcret
   996  000ACE                     __end_of_LCD_CMD:
   997                           	callstack 0
   998                           
   999 ;; *************** function _LCD_DATA *****************
  1000 ;; Defined at:
  1001 ;;		line 55 in file "main_lcd.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  Data            1    wreg     unsigned char 
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  Data            1    0[COMRAM] unsigned char 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1015 ;;      Params:         0       0       0       0       0       0       0       0       0
  1016 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1017 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1018 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1019 ;;Total ram usage:        1 bytes
  1020 ;; Hardware stack levels used: 1
  1021 ;; This function calls:
  1022 ;;		Nothing
  1023 ;; This function is called by:
  1024 ;;		_LCD_CMD
  1025 ;;		_LCD_Init
  1026 ;;		_LCD_Write_Char
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text9
  1031  0009BC                     __ptext9:
  1032                           	callstack 0
  1033  0009BC                     _LCD_DATA:
  1034                           	callstack 28
  1035                           
  1036                           ;incstack = 0
  1037                           ;LCD_DATA@Data stored from wreg
  1038  0009BC  6E01               	movwf	LCD_DATA@Data^0,c
  1039  0009BE                     
  1040                           ;main_lcd.c: 55: void LCD_DATA(unsigned char Data);main_lcd.c: 56: {;main_lcd.c: 57:    
      +                           if(Data & 1)
  1041  0009BE  A001               	btfss	LCD_DATA@Data^0,0,c
  1042  0009C0  EFE4  F004         	goto	u11
  1043  0009C4  EFE6  F004         	goto	u10
  1044  0009C8                     u11:
  1045  0009C8  EFE9  F004         	goto	l47
  1046  0009CC                     u10:
  1047  0009CC                     
  1048                           ;main_lcd.c: 58:         RB0 = 1;
  1049  0009CC  8081               	bsf	3969,0,c	;volatile
  1050  0009CE  EFEA  F004         	goto	l764
  1051  0009D2                     l47:
  1052                           
  1053                           ;main_lcd.c: 60:         RB0 = 0;
  1054  0009D2  9081               	bcf	3969,0,c	;volatile
  1055  0009D4                     l764:
  1056                           
  1057                           ;main_lcd.c: 61:     if(Data & 2)
  1058  0009D4  A201               	btfss	LCD_DATA@Data^0,1,c
  1059  0009D6  EFEF  F004         	goto	u21
  1060  0009DA  EFF1  F004         	goto	u20
  1061  0009DE                     u21:
  1062  0009DE  EFF4  F004         	goto	l49
  1063  0009E2                     u20:
  1064  0009E2                     
  1065                           ;main_lcd.c: 62:         RB1 = 1;
  1066  0009E2  8281               	bsf	3969,1,c	;volatile
  1067  0009E4  EFF5  F004         	goto	l768
  1068  0009E8                     l49:
  1069                           
  1070                           ;main_lcd.c: 64:         RB1 = 0;
  1071  0009E8  9281               	bcf	3969,1,c	;volatile
  1072  0009EA                     l768:
  1073                           
  1074                           ;main_lcd.c: 65:     if(Data & 4)
  1075  0009EA  A401               	btfss	LCD_DATA@Data^0,2,c
  1076  0009EC  EFFA  F004         	goto	u31
  1077  0009F0  EFFC  F004         	goto	u30
  1078  0009F4                     u31:
  1079  0009F4  EFFF  F004         	goto	l51
  1080  0009F8                     u30:
  1081  0009F8                     
  1082                           ;main_lcd.c: 66:         RB2 = 1;
  1083  0009F8  8481               	bsf	3969,2,c	;volatile
  1084  0009FA  EF00  F005         	goto	l772
  1085  0009FE                     l51:
  1086                           
  1087                           ;main_lcd.c: 68:         RB2 = 0;
  1088  0009FE  9481               	bcf	3969,2,c	;volatile
  1089  000A00                     l772:
  1090                           
  1091                           ;main_lcd.c: 69:     if(Data & 8)
  1092  000A00  A601               	btfss	LCD_DATA@Data^0,3,c
  1093  000A02  EF05  F005         	goto	u41
  1094  000A06  EF07  F005         	goto	u40
  1095  000A0A                     u41:
  1096  000A0A  EF0A  F005         	goto	l53
  1097  000A0E                     u40:
  1098  000A0E                     
  1099                           ;main_lcd.c: 70:         RB3 = 1;
  1100  000A0E  8681               	bsf	3969,3,c	;volatile
  1101  000A10  EF0B  F005         	goto	l55
  1102  000A14                     l53:
  1103                           
  1104                           ;main_lcd.c: 72:         RB3 = 0;
  1105  000A14  9681               	bcf	3969,3,c	;volatile
  1106  000A16                     l55:
  1107  000A16  0012               	return		;funcret
  1108  000A18                     __end_of_LCD_DATA:
  1109                           	callstack 0
  1110                           
  1111                           	psect	rparam
  1112  0000                     
  1113                           	psect	idloc
  1114                           
  1115                           ;Config register IDLOC0 @ 0x200000
  1116                           ;	unspecified, using default values
  1117  200000                     	org	2097152
  1118  200000  FF                 	db	255
  1119                           
  1120                           ;Config register IDLOC1 @ 0x200001
  1121                           ;	unspecified, using default values
  1122  200001                     	org	2097153
  1123  200001  FF                 	db	255
  1124                           
  1125                           ;Config register IDLOC2 @ 0x200002
  1126                           ;	unspecified, using default values
  1127  200002                     	org	2097154
  1128  200002  FF                 	db	255
  1129                           
  1130                           ;Config register IDLOC3 @ 0x200003
  1131                           ;	unspecified, using default values
  1132  200003                     	org	2097155
  1133  200003  FF                 	db	255
  1134                           
  1135                           ;Config register IDLOC4 @ 0x200004
  1136                           ;	unspecified, using default values
  1137  200004                     	org	2097156
  1138  200004  FF                 	db	255
  1139                           
  1140                           ;Config register IDLOC5 @ 0x200005
  1141                           ;	unspecified, using default values
  1142  200005                     	org	2097157
  1143  200005  FF                 	db	255
  1144                           
  1145                           ;Config register IDLOC6 @ 0x200006
  1146                           ;	unspecified, using default values
  1147  200006                     	org	2097158
  1148  200006  FF                 	db	255
  1149                           
  1150                           ;Config register IDLOC7 @ 0x200007
  1151                           ;	unspecified, using default values
  1152  200007                     	org	2097159
  1153  200007  FF                 	db	255
  1154                           
  1155                           	psect	config
  1156                           
  1157                           ;Config register CONFIG1L @ 0x300000
  1158                           ;	PLL Prescaler Selection bits
  1159                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1160                           ;	System Clock Postscaler Selection bits
  1161                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1162                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1163                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1164  300000                     	org	3145728
  1165  300000  01                 	db	1
  1166                           
  1167                           ;Config register CONFIG1H @ 0x300001
  1168                           ;	Oscillator Selection bits
  1169                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  1170                           ;	Fail-Safe Clock Monitor Enable bit
  1171                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1172                           ;	Internal/External Oscillator Switchover bit
  1173                           ;	IESO = ON, Oscillator Switchover mode enabled
  1174  300001                     	org	3145729
  1175  300001  8E                 	db	142
  1176                           
  1177                           ;Config register CONFIG2L @ 0x300002
  1178                           ;	Power-up Timer Enable bit
  1179                           ;	PWRT = OFF, PWRT disabled
  1180                           ;	Brown-out Reset Enable bits
  1181                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1182                           ;	Brown-out Reset Voltage bits
  1183                           ;	BORV = 3, Minimum setting 2.05V
  1184                           ;	USB Voltage Regulator Enable bit
  1185                           ;	VREGEN = OFF, USB voltage regulator disabled
  1186  300002                     	org	3145730
  1187  300002  19                 	db	25
  1188                           
  1189                           ;Config register CONFIG2H @ 0x300003
  1190                           ;	Watchdog Timer Enable bit
  1191                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1192                           ;	Watchdog Timer Postscale Select bits
  1193                           ;	WDTPS = 32768, 1:32768
  1194  300003                     	org	3145731
  1195  300003  1E                 	db	30
  1196                           
  1197                           ; Padding undefined space
  1198  300004                     	org	3145732
  1199  300004  FF                 	db	255
  1200                           
  1201                           ;Config register CONFIG3H @ 0x300005
  1202                           ;	CCP2 MUX bit
  1203                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1204                           ;	PORTB A/D Enable bit
  1205                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1206                           ;	Low-Power Timer 1 Oscillator Enable bit
  1207                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1208                           ;	MCLR Pin Enable bit
  1209                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1210  300005                     	org	3145733
  1211  300005  81                 	db	129
  1212                           
  1213                           ;Config register CONFIG4L @ 0x300006
  1214                           ;	Stack Full/Underflow Reset Enable bit
  1215                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1216                           ;	Single-Supply ICSP Enable bit
  1217                           ;	LVP = OFF, Single-Supply ICSP disabled
  1218                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1219                           ;	ICPRT = 0x0, unprogrammed default
  1220                           ;	Extended Instruction Set Enable bit
  1221                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1222                           ;	Background Debugger Enable bit
  1223                           ;	DEBUG = 0x1, unprogrammed default
  1224  300006                     	org	3145734
  1225  300006  81                 	db	129
  1226                           
  1227                           ; Padding undefined space
  1228  300007                     	org	3145735
  1229  300007  FF                 	db	255
  1230                           
  1231                           ;Config register CONFIG5L @ 0x300008
  1232                           ;	Code Protection bit
  1233                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1234                           ;	Code Protection bit
  1235                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1236                           ;	Code Protection bit
  1237                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1238                           ;	Code Protection bit
  1239                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1240  300008                     	org	3145736
  1241  300008  0F                 	db	15
  1242                           
  1243                           ;Config register CONFIG5H @ 0x300009
  1244                           ;	Boot Block Code Protection bit
  1245                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1246                           ;	Data EEPROM Code Protection bit
  1247                           ;	CPD = OFF, Data EEPROM is not code-protected
  1248  300009                     	org	3145737
  1249  300009  C0                 	db	192
  1250                           
  1251                           ;Config register CONFIG6L @ 0x30000A
  1252                           ;	Write Protection bit
  1253                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1254                           ;	Write Protection bit
  1255                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1256                           ;	Write Protection bit
  1257                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1258                           ;	Write Protection bit
  1259                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1260  30000A                     	org	3145738
  1261  30000A  0F                 	db	15
  1262                           
  1263                           ;Config register CONFIG6H @ 0x30000B
  1264                           ;	Configuration Register Write Protection bit
  1265                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1266                           ;	Boot Block Write Protection bit
  1267                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1268                           ;	Data EEPROM Write Protection bit
  1269                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1270  30000B                     	org	3145739
  1271  30000B  E0                 	db	224
  1272                           
  1273                           ;Config register CONFIG7L @ 0x30000C
  1274                           ;	Table Read Protection bit
  1275                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1276                           ;	Table Read Protection bit
  1277                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1278                           ;	Table Read Protection bit
  1279                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1280                           ;	Table Read Protection bit
  1281                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1282  30000C                     	org	3145740
  1283  30000C  0F                 	db	15
  1284                           
  1285                           ;Config register CONFIG7H @ 0x30000D
  1286                           ;	Boot Block Table Read Protection bit
  1287                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1288  30000D                     	org	3145741
  1289  30000D  40                 	db	64
  1290                           tosu	equ	0xFFF
  1291                           tosh	equ	0xFFE
  1292                           tosl	equ	0xFFD
  1293                           stkptr	equ	0xFFC
  1294                           pclatu	equ	0xFFB
  1295                           pclath	equ	0xFFA
  1296                           pcl	equ	0xFF9
  1297                           tblptru	equ	0xFF8
  1298                           tblptrh	equ	0xFF7
  1299                           tblptrl	equ	0xFF6
  1300                           tablat	equ	0xFF5
  1301                           prodh	equ	0xFF4
  1302                           prodl	equ	0xFF3
  1303                           indf0	equ	0xFEF
  1304                           postinc0	equ	0xFEE
  1305                           postdec0	equ	0xFED
  1306                           preinc0	equ	0xFEC
  1307                           plusw0	equ	0xFEB
  1308                           fsr0h	equ	0xFEA
  1309                           fsr0l	equ	0xFE9
  1310                           wreg	equ	0xFE8
  1311                           indf1	equ	0xFE7
  1312                           postinc1	equ	0xFE6
  1313                           postdec1	equ	0xFE5
  1314                           preinc1	equ	0xFE4
  1315                           plusw1	equ	0xFE3
  1316                           fsr1h	equ	0xFE2
  1317                           fsr1l	equ	0xFE1
  1318                           bsr	equ	0xFE0
  1319                           indf2	equ	0xFDF
  1320                           postinc2	equ	0xFDE
  1321                           postdec2	equ	0xFDD
  1322                           preinc2	equ	0xFDC
  1323                           plusw2	equ	0xFDB
  1324                           fsr2h	equ	0xFDA
  1325                           fsr2l	equ	0xFD9
  1326                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     16      16
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[12]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_LCD_Write_String
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_SR->_LCD_CMD
    _LCD_SL->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1311
                                             10 COMRAM     6     6      0
                          _LCD_Clear
                           _LCD_Init
                             _LCD_SL
                             _LCD_SR
                     _LCD_Set_Cursor
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     6     4      2     362
                                              4 COMRAM     6     4      2
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       3     3      0     120
                                              1 COMRAM     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     497
                                              2 COMRAM     5     4      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SR                                               0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SL                                               0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0     135
                                              2 COMRAM     1     1      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0      75
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              1     1      0      75
                                              1 COMRAM     1     1      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      60
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CMD
       _LCD_DATA
   _LCD_Init
     _LCD_CMD
     _LCD_DATA
   _LCD_SL
     _LCD_CMD
   _LCD_SR
     _LCD_CMD
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_DATA

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     10      10       1       16.8%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Oct 15 16:52:57 2024

                       l51 09FE                         l53 0A14                         l61 0B04  
                       l55 0A16                         l47 09D2                         l64 098A  
                       l72 0AB4                         l49 09E8                         l81 0AF6  
                       l58 0ACC                         l66 09BA                         l84 0AE8  
                       l69 0958                         l78 0A6C                         u10 09CC  
                       u11 09C8                         u20 09E2                         u21 09DE  
                       u30 09F8                         u31 09F4                         u40 0A0E  
                       u41 0A0A                        l800 0A9A                        l810 08E0  
                      l802 0AA0                        l820 08FE                        l812 08E4  
                      l900 0984                        l804 0AA2                        l822 0906  
                      l814 08E6                        l902 099C                        l806 0AAA  
                      l910 0A24                        l760 09BE                        l824 091C  
                      l816 08E8                        l904 09AE                        l808 0AAC  
                      l912 0A40                        l920 082E                        l770 09F8  
                      l762 09CC                        l826 0922                        l818 08EE  
                      l906 09B4                        l914 0A44                        l922 083A  
                      l772 0A00                        l764 09D4                        l780 0AC0  
                      l828 0AF8                        l852 0ADC                        l908 0A18  
                      l940 0894                        l932 0858                        l924 0844  
                      l916 081C                        l774 0A0E                        l766 09E2  
                      l782 0AC2                        l854 0AEA                        l790 0A7E  
                      l950 08B8                        l934 0870                        l926 0850  
                      l918 0824                        l768 09EA                        l784 0ACA  
                      l776 0AB8                        l792 0A86                        l952 08BC  
                      l936 0874                        l778 0ABA                        l794 0A88  
                      l786 0A70                        l946 089C                        l938 0878  
                      l796 0A90                        l788 0A7C                        l948 08B4  
                      l894 095C                        l798 0A92                        l896 096C  
                      l898 097E                        _RB0 007C08                        _RB1 007C09  
                      _RB2 007C0A                        _RB3 007C0B                        _RB4 007C0C  
                      _RB5 007C0D                        u100 096C                        u101 0968  
                      u110 099C                        u111 0998                        u120 0A6C  
                      u121 0A68                        u130 0894                        u131 0890  
                      u140 08D8                        u141 08D4                        u207 0AAE  
                      u217 08F4                        u227 0900                        u237 0912  
                      u157 0862                        u247 0924                        u167 08A6  
                      u257 0AC4                        u177 0A8A                        u187 0A94  
                      u197 0AA4                        wreg 000FE8            __end_of_LCD_CMD 0ACE  
           _LCD_Set_Cursor 095A        LCD_Write_String@str 0005                       STR_1 0801  
                     STR_2 080F          ?_LCD_Write_String 0005                       _main 081C  
       __size_of_LCD_Clear 000E                       start 0000         ??_LCD_Write_String 0007  
             ___param_bank 000000           __end_of_LCD_DATA 0A18           __end_of_LCD_Init 095A  
                    ?_main 0001                      _TRISB 000F93     __end_of_LCD_Set_Cursor 09BC  
                    main@i 000D                      tablat 000FF5                      status 000FD8  
           _LCD_Write_Char 0A6E            __initialization 0ACE               __end_of_main 08E0  
                   ??_main 000B          __end_of_LCD_Clear 0B06              __activetblptr 000001  
                ??_LCD_CMD 0002            ?_LCD_Set_Cursor 0003                     _LCD_SL 0AEA  
                   _LCD_SR 0ADC                     _TRISB4 007C9C                     _TRISB5 007C9D  
   __end_of_LCD_Write_Char 0AB6                     isa$std 000001               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
          LCD_Set_Cursor@c 0003            LCD_Set_Cursor@r 0004                  ?_LCD_DATA 0001  
               __accesstop 0060    __end_of__initialization 0ACE                  ?_LCD_Init 0001  
            ___rparam_used 000001            ?_LCD_Write_Char 0001             __pcstackCOMRAM 0001  
                  ?_LCD_SL 0001                    ?_LCD_SR 0001                 ??_LCD_DATA 0001  
               ??_LCD_Init 0003  __size_of_LCD_Write_String 0056                    _LCD_CMD 0AB6  
          __size_of_LCD_SL 000E            __size_of_LCD_SR 000E                    __Hparam 0000  
                  __Lparam 0000               __psmallconst 0800                    __pcinit 0ACE  
                  __ramtop 0800           ??_LCD_Set_Cursor 0004                    __ptext0 081C  
                  __ptext1 0A18                    __ptext2 0A6E                    __ptext3 095A  
                  __ptext4 0ADC                    __ptext5 0AEA                    __ptext6 08E0  
                  __ptext7 0AF8                    __ptext8 0AB6                    __ptext9 09BC  
                _LCD_Clear 0AF8       end_of_initialization 0ACE                 LCD_CMD@CMD 0002  
               ?_LCD_Clear 0001          LCD_Write_String@i 0009           ??_LCD_Write_Char 0002  
           __end_of_LCD_SL 0AF8             __end_of_LCD_SR 0AEA          __size_of_LCD_DATA 005C  
        __size_of_LCD_Init 007A           _LCD_Write_String 0A18        start_initialization 0ACE  
                 ??_LCD_SL 0003                   ??_LCD_SR 0003                   ?_LCD_CMD 0001  
              ??_LCD_Clear 0003                __smallconst 0800                   _LCD_DATA 09BC  
                 _LCD_Init 08E0           __size_of_LCD_CMD 0018   __end_of_LCD_Write_String 0A6E  
                 __Hrparam 0000                   __Lrparam 0000        LCD_Write_Char@High4 0003  
             __Lsmallconst 0800    __size_of_LCD_Set_Cursor 0062              __size_of_main 00C4  
                 isa$xinst 000000        LCD_Set_Cursor@High4 0006                   main@i_74 000F  
       LCD_Write_Char@Data 0004         LCD_Write_Char@Low4 0002    __size_of_LCD_Write_Char 0048  
       LCD_Set_Cursor@Low4 0005         LCD_Set_Cursor@Temp 0007               LCD_DATA@Data 0001  
